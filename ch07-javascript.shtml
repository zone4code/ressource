<!--#include virtual="commontop.html" -->
		<title>Web Programming Step by Step, Chapter 7: JavaScript for Interactive Web Pages</title>
	</head>

	<body>
		<div class="layout">
			<div id="controls"><!-- DO NOT EDIT --></div>
			<div id="currentSlide"><!-- DO NOT EDIT --></div>
			<div id="header"></div>
			<div id="footer">
				<h1><em>Web Programming Step by Step</em>, Chapter 7</h1>
				<h2>JavaScript for Interactive Web Pages</h2>
			</div>
		</div>

		<div class="presentation">
			<div class="slide">
				<h1><a href="http://www.webstepbook.com/">Web Programming Step by Step</a></h1>
				<h3>Chapter 7 <br /> JavaScript for Interactive Web Pages</h3>

				<p class="license">
					Except where otherwise noted, the contents of this presentation are Copyright 2009 Marty Stepp and Jessica Miller.
				</p>

				<div class="w3c">
					<a href="http://validator.w3.org/check/referer"><img src="images/w3c-xhtml11.png" alt="Valid XHTML 1.1" /></a>
					<a href="http://jigsaw.w3.org/css-validator/check/referer"><img src="images/w3c-css.png" alt="Valid CSS!" /></a>
				</div>
			</div>



			<div class="slide titleslide">
				<h1>7.1: Key JavaScript Concepts</h1>
				
				<ul>
					<li>
						<strong>7.1: Key JavaScript Concepts</strong>
					</li>
					<li>
						7.2: JavaScript Syntax
					</li>
					<li>
						7.3: Program Logic
					</li>
					<li>
						7.4: Advanced JavaScript Syntax
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					What is JavaScript?
					<span class="readingsection">(7.1)</span>
				</h1>
				
				<ul>
					<li>a lightweight programming language (scripting)</li>
					<li>used to make web pages interactive
						<ul>
							<li>insert dynamic text into HTML (ex: user name)</li>
							<li>react to events (ex: page load user click)</li>
							<li>get information about a user's computer (ex: browser type)</li>
							<li>perform calculations on user's computer (ex: form validation)</li>
						</ul>
					</li>
					<li>a <a href="http://www.webstandards.org/">web standard</a> (but not supported identically by <a href="http://en.wikipedia.org/wiki/Criticisms_of_Internet_Explorer#JavaScript_and_DOM">all browsers</a>)</li>
					<li>NOT related to Java other than by name and some syntactic similarities</li>
				</ul>
			</div>



			<div class="slide">
				<h1>JavaScript vs. Java</h1>

				<div class="rightfigure">
					<img style="width: 100px" src="images/java.jpg" alt="Java" />
					+
					<img style="width: 100px" src="images/cannabis.png" alt="mary jane, da endo, aight" />
					= JavaScript
				</div>

				<ul>
					<li><span class="term">interpreted</span>, not compiled</li>
					<li>more relaxed syntax and rules
						<ul>
							<li>fewer and &quot;looser&quot; data types</li>
							<li>variables don't need to be declared</li>
							<li>errors often silent (few exceptions)</li>
						</ul>
					</li>
					<li>key construct is the <span class="term">function</span> rather than the class
						<ul>
							<li>(more procedural less object-oriented)</li>
						</ul>
					</li>
					<li>contained within a web page and integrates with its HTML/CSS content</li>
				</ul>
			</div>



			<div class="slide">
				<h1>JavaScript vs. PHP</h1>

				<div class="rightfigure">
					JS &lt;3
					<img src="images/php_logo.gif" alt="php" style="margin-right: 2em" />
				</div>

				<ul>
					<li>similarities:
						<ul>
							<li>both are <span class="term">interpreted</span>, not compiled</li>
							<li>both are relaxed about syntax, rules, and types</li>
							<li>both are case-sensitive</li>
							<li>both have built-in regular expressions (powerful text processing)</li>
						</ul>
					</li>
					
					<li>differences:
						<ul>
							<li>JS is less procedural (<code>verb(noun)</code>), more object-oriented (<code>noun.verb()</code>)</li>
							<li>JS focuses on user interfaces and interacting with a document; PHP is geared toward HTML output and file/form processing</li>
							<li>JS code runs on the client's browser; PHP code runs on the web server</li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>
					Client-side scripting
					<span class="readingsection">(7.1.1)</span>
				</h1>
				
				<div class="centerfigure">
					<img src="images/figure_2_client_side_scripting.png" alt="client-side scripting" width="50%" />
				</div>
				
				<ul>
					<li><span class="term">client-side script</span>: code runs in browser after page is sent back from server
						<ul>
							<li>often this code manipulates the page or responds to user actions</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Why use client-side programming?</h1>
			
				<p>
					PHP already allows us to create dynamic web pages.  Why also use a client-side language like JavaScript?
				</p>

				<ul>
					<li>
						PHP benefits:
						<ul>
							<li><strong>security</strong>: has access to server's private data; client can't see source code</li>
							<li><strong>compatibility</strong>: avoids browser compatibility issues</li>
							<li><strong>power</strong>: fewer restrictions (can write to files, open connections to other servers, connect to databases, ...)</li>
						</ul>
					</li>
					
					<li>
						JavaScript benefits:
						<ul>
							<li><span class="term">usability</span>: can modify a page without having to post back to the server (faster UI)</li>
							<li><span class="term">efficiency</span>: can make small, quick changes to page without waiting for server</li>
							<li><span class="term">event-driven</span>: can respond to user actions like clicks and key presses</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					<a href="http://en.wikipedia.org/wiki/Event_driven_programming">Event-driven programming</a>
				</h1>
				
				<div class="centerfigure">
					<img src="images/figure_3_event.png" alt="event" width="50%" />
				</div>
				
				<ul>
					<li>most languages' programs start with a <code>main</code> method and run sequentially</li>
					<li>JavaScript programs wait for user actions called <span class="term">events</span> and respond to them</li>
					<li><span class="term">event-driven programming</span>: writing programs driven by user events</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Buttons:
					<a href="http://www.w3schools.com/tags/tag_button.asp"><code>&lt;button&gt;</code></a>
				</h1>
				
				<p class="description">
					the most common clickable UI control (inline)
				</p>

				<div class="example">
					<pre class="examplecode html">
<em>&lt;button&gt;</em>Click me!<em>&lt;/button&gt;</em>
</pre>

					<div class="exampleoutput insertoutput"></div>
				</div>

				<ul>
					<li>button's text appears inside tag; can also contain images</li>

					<li>To make a responsive button or other UI control:
						<ol>
							<li>choose the control (e.g. button) and event (e.g. mouse click) of interest</li>
							<li>write a JavaScript function to run when the event occurs</li>
							<li>attach the function to the event on the control</li>
						</ol>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Linking to a JavaScript file:
					<a href="http://www.w3schools.com/tags/tag_script.asp"><code>script</code></a>
				</h1>

				<pre class="syntaxtemplate html">
&lt;script src=&quot;<var>filename</var>&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
</pre>

				<pre class="examplecode html">
&lt;script src=&quot;example.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
</pre>

				<ul>
					<li><code>script</code> tag should be placed in HTML page's <code>head</code></li>
					<li>script code is stored in a separate <code>.js</code> file</li>
					<li>JS code can be placed directly in the HTML file's <code>body</code> or <code>head</code> (like CSS)
						<ul>
							<li>but this is bad style (should separate content, presentation, and behavior)</li>
						</ul>
				</ul>
			</div>



			<div class="slide">
				<h1>
					A JavaScript statement:
					<a href="http://www.w3schools.com/js/js_popup.asp"><code>alert</code></a>
				</h1>

				<pre class="syntaxtemplate js">
alert(&quot;<var>message</var>&quot;);
</pre>

				<div class="example">
					<pre class="examplecode js">
alert(&quot;IE6 detected.  Suck-mode enabled.&quot;);
</pre>

					<div class="exampleoutput">
						<img src="images/alert.png" alt="alert" /> 
					</div>
				</div>
				
				<ul>
					<li>a JS command that pops up a dialog box with a message</li>
				</ul>
			</div>



			<div class="slide">
				<h1>JavaScript functions</h1>

				<pre class="syntaxtemplate js">
function <var>name</var>() {
	<var>statement</var> ;
	<var>statement</var> ;
	...
	<var>statement</var> ;
}
</pre>

				<pre class="examplecode js">
function myFunction() {
	alert(&quot;Hello!&quot;);
	alert(&quot;How are you?&quot;);
}
</pre>

				<ul>
					<li>the above could be the contents of <code>example.js</code> linked to our HTML page</li>
					<li>statements placed into functions can be evaluated in response to user events</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Event handlers</h1>

					<pre class="syntaxtemplate html">
&lt;<var>element</var> <var>attributes</var> <em>onclick=&quot;<var>function</var>();&quot;</em>&gt;...
</pre>

				<div class="example">
					<pre class="examplecode html">
&lt;button <em>onclick=&quot;myFunction();&quot;</em>&gt;Click me!&lt;/button&gt;
</pre>

					<div class="exampleoutput insertoutput">
						<script type="text/javascript">
							function myFunction() {
								alert("Hello!");
								alert("How are you?");
							}
						</script>
					</div>
				</div>

				<ul>
					<li>JavaScript functions can be set as <span class="term">event handlers</span>
						<ul>
							<li>when you interact with the element, the function will execute</li>
						</ul>
					</li>
					<li><code><a href="http://www.w3schools.com/jsref/jsref_onclick.asp">onclick</a></code> is just one of many event HTML attributes we'll use</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Document Object Model
					(<a href="http://www.w3.org/TR/2004/PR-DOM-Level-3-Core-20040205/introduction.html">DOM</a>)
					<span class="readingsection">(7.1.4)</span>
				</h1>
				
				<p class="description">
					a set of JavaScript objects that represent each element on the page
				</p>
				
				<div class="rightfigure">
					<img src="images/dom.png" alt="DOM" style="width: 100%" />
				</div>

				<ul>
					<li>most JS code manipulates elements on an HTML page</li>
					<li>we can examine the state of the elements, e.g. whether a box is checked</li>
					<li>we can change state, e.g. putting text into a <code>div</code></li>
					<li>we can change styles, e.g. make a paragraph red</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Accessing elements: <code>getElementById</code></h1>

				<pre class="syntaxtemplate js">
var <var>name</var> = document.getElementById(&quot;<var>id</var>&quot;);
</pre>

				<div class="example">
					<pre class="examplecode html">
&lt;button onclick=&quot;myFunction2();&quot;&gt;Click me!&lt;/button&gt;
&lt;span <em>id=&quot;output&quot;</em>&gt;replace me&lt;/span&gt;
</pre>

					<pre class="examplecode examplecode2 js">
function myFunction2() {
	var span = <em>document.getElementById(&quot;output&quot;)</em>;
	span.innerHTML = &quot;Hello, how are you?&quot;;
}
</pre>

					<div class="exampleoutput insertoutput"></div>
				</div>

				<ul>
					<li>
						<code>document.getElementById</code> returns DOM object for an element with a given <code>id</code>
					</li>
					<li>
						can change the text inside most elements by setting <code>innerHTML</code> property
					</li>
				</ul>
			</div>



			<div class="slide titleslide">
				<h1>7.2: JavaScript Syntax</h1>
				
				<ul>
					<li>
						7.1: Key JavaScript Concepts
					</li>
					<li>
						<strong>7.2: JavaScript Syntax</strong>
					</li>
					<li>
						7.3: Program Logic
					</li>
					<li>
						7.4: Advanced JavaScript Syntax
					</li>
				</ul>
			</div>


			
			<!--
			<div class="slide">
				<h1>JavaScript keywords</h1>

				<p>
					<code>abstract boolean break byte case catch char class const continue debugger default <em>delete</em> do double else enum export extends false final finally float for <em>function</em> goto if implements import <em>in</em> instanceof int interface long native new null package private protected public return short static super switch synchronized this throw throws transient true try typeof <em>var</em> void volatile while with</code>
				</p>
				
				<ul>
					<li>new ones we'll use most: <code>var</code>, <code>function</code></li>
				</ul>
			</div>
			-->



			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/js/js_variables.asp">Variables</a> and types
					<span class="readingsection">(7.2.1, 7.2.3)</span>
				</h1>

<pre class="syntaxtemplate js">
var <var>name</var> = <var>expression</var>;
</pre>

<pre class="examplecode js">
var clientName = &quot;Connie Client&quot;;
var age = 32;
var weight = 127.4;
</pre>

				<ul>
					<li>variables are declared with the <code>var</code> keyword (case sensitive)</li>
					<li>types are not specified, but JS does have types (&quot;loosely typed&quot;)
						<ul>
							<li><code>Number</code>, <code>Boolean</code>, <code>String</code>, <code>Array</code>, <code>Object</code>, <code>Function</code>, <code>Null</code>, <code>Undefined</code></li>
							<li>can find out a variable's type by calling <a href="http://javascript.crockford.com/remedial.html"><code>typeof</code></a></li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					<code>Number</code> type
					<span class="readingsection">(7.2.2)</span>
				</h1>

<pre class="examplecode js">
var enrollment = 99;
var medianGrade = 2.8;
var credits = 5 + 4 + (2 * 3);
</pre>

				<ul>
					<li>integers and real numbers are the same type (no <code>int</code> vs. <code>double</code>)</li>
					<li>
						same operators: <code>+ - * / % ++ -- = += -= *= /= %=</code>
					</li>
					<li>similar <a href="http://www.codehouse.com/javascript/precedence/">precedence</a> to Java</li>
					<li>many operators auto-convert types: <code>&quot;2&quot; * 3</code> is <code>6</code></li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Comments
					<span class="sameasjava">(same as Java)</span>
					<span class="readingsection">(7.2.4)</span>
				</h1>

<pre class="syntaxtemplate js">
<span class="comment">// <var>single-line comment</var>

/* <var>multi-line comment</var> */</span>
</pre>

				<ul>
					<li>identical to Java's comment syntax</li>
					<li>recall: 4 comment syntaxes
						<ul>
							<li><span style="float: left; width: 6em">HTML:</span> <code>&lt;!-- <var>comment</var> --&gt;</code></li>
							<li><span style="float: left; width: 6em">CSS/JS/PHP:</span> <code>/* <var>comment</var> */</code></li>
							<li><span style="float: left; width: 6em">Java/JS/PHP:</span> <code>// <var>comment</var></code></li>
							<li><span style="float: left; width: 6em">PHP:</span> <code># <var>comment</var></code></li>
						</ul>
					</li>
				</ul>

			</div>



			<div class="slide">
				<h1>
					DOM object properties
					<span class="readingsection">(7.2.5)</span>
				</h1>

				<div class="example">
					<pre class="examplecode html">
&lt;div <em>id=&quot;main&quot;</em> class=&quot;foo bar&quot;&gt;
	&lt;p&gt;Hello, &lt;em&gt;very&lt;/em&gt; happy to see you!&lt;/p&gt;
	&lt;img <em>id=&quot;icon&quot;</em> src=&quot;images/borat.jpg&quot; alt=&quot;Borat&quot; /&gt;
&lt;/div&gt;
</pre>

					<pre class="examplecode examplecode2 examplecodelast js">
var div = document.getElementById(&quot;main&quot;);
var image = document.getElementById(&quot;icon&quot;);
</pre>
				</div>

				<ul>
					<li>
						<code>tagName</code>: element's HTML tag, capitalized;
						<code style="padding-left: 1em">div.tagName</code> is <code>&quot;DIV&quot;</code>
					</li>
					<li>
						<code>className</code>: CSS classes of element; 
						<code style="padding-left: 3em">div.className</code> is <code>&quot;foo bar&quot;</code>
					</li>
					<li>
						<code>innerHTML</code>: HTML content inside element;
						<code style="padding-left: 1em">div.innerHTML</code> is <code>&quot;\n&nbsp; &lt;p&gt;Hello, &lt;em&gt;very&lt;/em&gt; happy to ...</code>
					</li>
					<li>
						<code>src</code>: URL target of an image;
						<code style="padding-left: 4em">image.src</code> is <code>&quot;images/borat.jpg&quot;</code>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>DOM properties for other elements</h1>

				<div class="example">
					<pre class="examplecode html">
&lt;input <em>id=&quot;studentid&quot;</em> type=&quot;text&quot; size=&quot;7&quot; maxlength=&quot;7&quot; /&gt;
&lt;input <em>id=&quot;freshman&quot;</em> type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt; Freshman?
</pre>

					<pre class="examplecode examplecode2 js">
var sid = document.getElementById(&quot;studentid&quot;);
var frosh = document.getElementById(&quot;freshman&quot;);
</pre>

					<div class="exampleoutput insertoutput"></div>
				</div>

				<ul>
					<li><code>value</code>: the text in an input control
						<ul>
							<li><code>sid.value</code> could be <code>&quot;1234567&quot;</code></li>
						</ul>
					</li>
					<li><code>checked</code>, <code>disabled</code>, <code>readOnly</code>: whether a control is selected/disabled/etc.
						<ul>
							<li><code>frosh.checked</code> is <code>true</code></li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<!-- *** amazing multiplier / adder here -->



			<div class="slide">
				<h1>
					Debugging common errors
					<span class="readingsection">(7.2.6)</span>
				</h1>
				
				<ul>
					<li>
						JavaScript's syntax is looser than Java's, but its errors are meaner
						<ul>
							<li>
								most errors produce no visible output or error message!
							</li>
						</ul>
					</li>
					
					<li>some common error symptoms:
						<ul>
							<li><q>My program does nothing.</q> (most errors produce no output)</li>
							<li><q>It just prints <code>undefined</code>.</q> (many typos lead to undefined variables)</li>
							<li><q>I get an error that says, <code>foo</code> has no properties.</q></li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Debugging JS code in Firebug</h1>
				
				<div class="rightfigure">
					<img src="images/firebug_js.png" alt="Firebug JS" />
				</div>
				
				<ul>
					<li>Firebug JS debugger can set breakpoints, step through code, examine values (Script tab)</li>
					<li>interaction pane for typing in arbitrary JS expressions (Console tab; Watch tab within Script tab)</li>
				</ul>
			</div>


			
			<div class="slide">
				<h1>JSLint</h1>
				
				<div class="rightfigure">
					<img src="images/jslint.png" alt="JSLint" style="width: 100%" />
				</div>
				
				<ul>
					<li><span class="term">JSLint</span>: an analyzer that checks your JS code, much like a compiler, and points out common errors
						<ul>
							<li><a href="http://webster.cs.washington.edu/jslint/">Marty's version</a></li>
							<li><a href="http://www.jslint.com/">original version</a>, by Douglas Crockford of Yahoo!</li>
						</ul>
					</li>
					<li>when your JS code doesn't work, paste it into JSLint first to find many common problems</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Debugging checklist
				</h1>
				
				<ul>
					<li>
						Are you sure the browser is even loading your JS file at all? <br /> Put an <code>alert</code> at the top of it and make sure it appears.
					</li>

					<li>When you change your code, do a <strong>full browser refresh (Shift-Ctrl-R)</strong></li>

					<li>
						<img class="rightfigure" src="images/firebug_js_error.png" alt="Firebug JS error" />

						Check bottom-right corner of Firefox for Firebug syntax errors.
					</li>
					<li>
						Paste your code into our <a href="http://webster.cs.washington.edu/jslint/">JSLint</a> tool to find problems.
					</li>
					<li>Type some test code into Firebug's console or use a breakpoint.</li>
				</ul>
			</div>



			<div class="slide">
				<h1>&quot;My program does nothing&quot;</h1>

				<p>
					Since Javascript has no compiler, many errors will cause your Javascript program to just &quot;do nothing.&quot;  Some questions you should ask when this happens:
				</p>

				<ul>
					<li>Is the browser even loading my script file?</li>
					<li>If so, is it reaching the part of the file that I want it to reach?</li>
					<li>If so, what is it doing once it gets there?</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Is my JS file loading?</h1>

				<ul>
					<li>put an <code>alert</code> at the VERY TOP of your script: <br />
					<img src="images/js_alert_loaded.png" alt="loaded" />
					</li>
					<li class="incremental">if it shows up, good!</li>
					<li class="incremental">if it doesn't show up:
						<ul>
							<li>maybe your HTML file isn't linking to the script properly
								<ul>
								<li>double-check file names and directories</li>
								</ul>
							</li>
							<li class="incremental">maybe your script has a syntax error
								<ul>
									<li>check bottom-right for Firebug error text <img class="incremental" src="images/firebug_errors.png" alt="error" /></li>
									<li>comment out the rest of your script and try it again</li>
									<li>run your script through <a href="http://webster.cs.washington.edu/jslint/">JSLint</a> to find some syntax problems</li>
								</ul>
							</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Is it reaching the code I want it to run?</h1>

				<ul>
					<li>put an <code>alert</code> at the start of the appropriate function: <br />
					<img src="images/js_alert_called.png" alt="loaded" />
						<ul>
							<li>write a descriptive message, not just <code>&quot;hello&quot;</code> or <code>&quot;here&quot;</code></li>
						</ul>
					</li>
					<li>if it shows up, good!</li>
					<li class="incremental">if it doesn't show up:
						<ul>
							<li>if it's an event handler, maybe you didn't attach it properly</li>
							<li>maybe your script has a syntax error; run <a href="http://webster.cs.washington.edu/jslint/">JSLint</a></li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Object 'foo' has no properties</h1>
				
				<ul>
					<li>
						these errors mean you are trying to utilize an undefined value:
						<ul>
							<li><code>Object foo has no properties</code></li>
							<li><code>ReferenceError: foo is not defined</code></li>
							<li><code>TypeError: foo.bar is not a function</code></li>
						</ul>
					</li>
					<li>possible causes:
						<ul>
							<li>you're trying to access a variable that is out of scope</li>
							<li>you're trying access a DOM element with an invalid <code>id</code></li>
							<li>you've run off the bounds of an array</li>
							<li>you've spelled the variable's name incorrectly</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Common bug: bracket mismatches</h1>

<pre class="examplecode js">
function foo() {
	...   <span class="comment">// missing closing curly brace!</span>

function bar() {
	...
}
</pre>

				<ul>
					<li>JS doesn't always tell us when we have too many/few brackets
						<ul>
							<li>(it is legal in JavaScript to declare one function inside another)</li>
						</ul>
					</li>
					<li><strong>symptom</strong>: script becomes (fully or partially) non-functional</li>
					<li><strong>detection</strong>: bracket matching in TextPad (highlight bracket, press Ctrl-M); using an <a href="http://www.cs.washington.edu/education/courses/cse190m/09sp/indent.html">Indenter</a> tool; <a href="http://webster.cs.washington.edu/jslint/">JSLint</a></li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/jsref/jsref_obj_string.asp"><code>String</code></a> type
					<span class="readingsection">(7.2.7)</span>
				</h1>

<pre class="examplecode js">
var s = &quot;Connie Client&quot;;
var fName = s.<em>substring</em>(0, s.<em>indexOf</em>(&quot; &quot;));   <span class="comment">// &quot;Connie&quot;</span>
var len = s.<em>length</em>;                           <span class="comment">// 13</span>
var s2 = 'Melvin Merchant';
</pre>

				<ul>
					<li>methods:
						<a href="http://www.w3schools.com/jsref/jsref_charAt.asp"><code>charAt</code></a>,
						<a href="http://www.w3schools.com/jsref/jsref_charCodeAt.asp"><code>charCodeAt</code></a>,
						<a href="http://www.w3schools.com/jsref/jsref_fromCharCode.asp"><code>fromCharCode</code></a>,
						<a href="http://www.w3schools.com/jsref/jsref_indexOf.asp"><code>indexOf</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_lastIndexOf.asp"><code>lastIndexOf</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_replace.asp"><code>replace</code></a>,
						<a href="http://www.w3schools.com/jsref/jsref_split.asp"><code>split</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_substring.asp"><code>substring</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_toLowerCase.asp"><code>toLowerCase</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_toUpperCase.asp"><code>toUpperCase</code></a>
						
						<ul>
							<li><code>charAt</code> returns a one-letter <code>String</code> (there is no <code>char</code> type)</li>
						</ul>
					</li>
					<li><code>length</code> property (not a method as in Java)</li>
					<li>Strings can be specified with <code>&quot;&quot;</code> or <code>''</code></li>
					<li>
						concatenation with <code>+</code> :
						<ul>
							<li>
								<code>1</code> + 1 is <code>2</code>, but
								<code>&quot;1&quot;</code> + 1 is <code>&quot;11&quot;</code>
							</li>
						</ul>
					</li>
				</ul>
			</div>


			<div class="slide">
				<h1>More about <code>String</code></h1>

				<ul>
					<li>
						escape sequences behave as in Java:
						<code>\' \&quot; \&amp; \n \t \\</code>
					</li>
					<li>converting between numbers and <code>String</code>s:
						<pre class="examplecode js">
var s1 = <em>String(</em>myNum<em>)</em>;</code>
var s2 = count <em>+</em> &quot; bananas, ah ah ah!&quot;;</code>
var n1 = parseInt(&quot;42 is the answer&quot;);  <span class="comment">// 42</span></code>
var n2 = parseFloat(&quot;booyah&quot;);  <span class="comment">// <a href="http://www.w3schools.com/jsref/jsref_NaN.asp">NaN</a></span>
</pre>
					</li>
					<li>accessing the letters of a <code>String</code>:
						<pre class="examplecode js">
var firstLetter = s<em>[0]</em>;  <span class="comment">// doesn't work in IE</span></code>
var lastLetter = <em>s.charAt(s.length - 1);</em>
</pre>
					</li>
				</ul>
			</div>
			
			
			
			<!-- *** example program: name converter -->



			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/js/js_loop_for.asp"><code>for</code></a> loop
					<span class="sameasjava">(same as Java)</span>
					<span class="readingsection">(7.2.8)</span>
				</h1>

<pre class="syntaxtemplate js">
for (<var>initialization</var>; <var>condition</var>; <var>update</var>) {
	<var>statements</var>;
}
</pre>

<pre class="examplecode js">
var sum = 0;
<em>for (var i = 0; i &lt; 100; i++) {</em>
	sum = sum + i;
<em>}</em>
</pre>

<pre class="examplecode js">
var s1 = &quot;hello&quot;;
var s2 = &quot;&quot;;
<em>for (var i = 0; i &lt; s.length; i++) {</em>
	s2 += s1.charAt(i) + s1.charAt(i);
<em>}</em>
<span class="comment">// s2 stores &quot;hheelllloo&quot;</span>
</pre>
			</div>



			<!-- *** example program: factorializer -->



			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/jsref/jsref_obj_math.asp">Math</a> object
					<span class="readingsection">(7.2.9)</span>
				</h1>

<pre class="examplecode js">
var rand1to10 = <em>Math.floor</em>(<em>Math.random()</em> * 10 + 1);
var three = <em>Math.floor</em>(<em>Math.PI</em>);
</pre>

				<ul>
					<li>methods: 
						<code><a href="http://www.w3schools.com/jsref/jsref_abs.asp">abs</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_ceil.asp">ceil</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_cos.asp">cos</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_floor.asp">floor</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_log.asp">log</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_max.asp">max</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_min.asp">min</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_pow.asp">pow</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_random.asp">random</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_round.asp">round</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_sin.asp">sin</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_sqrt.asp">sqrt</a></code>, 
						<code><a href="http://www.w3schools.com/jsref/jsref_tan.asp">tan</a></code></li>
					</li>
					<li>properties:
						<code>E</code>,
						<code>PI</code>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Special values: <code>null</code> and <code>undefined</code>
					<span class="readingsection">(7.2.10)</span>
				</h1>

<pre class="examplecode js">
var ned = null;
var benson = 9;
var caroline;

<span class="comment">// at this point in the code,
//   ned is null
//   benson's 9
//   caroline is undefined</span>
</pre>

				<ul>
					<li><code>undefined</code> : has not been declared, does not exist</li>
					<li><code>null</code> : exists, but was specifically assigned a <code>null</code> value</li>
					<li>Why does JavaScript have both of these?</li>
				</ul>
			</div>



			<div class="slide titleslide">
				<h1>7.3: Program Logic</h1>
				
				<ul>
					<li>
						7.1: Key JavaScript Concepts
					</li>
					<li>
						7.2: JavaScript Syntax
					</li>
					<li>
						<strong>7.3: Program Logic</strong>
					</li>
					<li>
						7.4: Advanced JavaScript Syntax
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Logical operators
					<span class="readingsection">(7.3.1, 7.3.4)</span>
				</h1>
				
				<ul>
					<li>
						<code>&gt; &lt; &gt;= &lt;= &amp;&amp; || ! == != <em>=== !==</em></code>
					</li>
					<li>
						most logical operators automatically convert types:
						<ul>
							<li>
								<code>5 &lt; &quot;7&quot;</code> is <code>true</code>
							</li>
							<li>
								<code>42 == 42.0</code> is <code>true</code>
							</li>
							<li><code>&quot;5.0&quot; == 5</code> is <code>true</code></li>
						</ul>
					</li>
					<li>
						<code>===</code> and <code>!==</code> are strict equality tests; checks both type and value
						<ul>
							<li>
								<code>&quot;5.0&quot; === 5</code> is <code>false</code></li>
							</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/js/js_if_else.asp"><code>if/else</code></a> statement
					<span class="sameasjava">(same as Java)</span>
					<span class="readingsection">(7.3.2)</span>
				</h1>

<pre class="syntaxtemplate js">
if (<var>condition</var>) {
	<var>statements</var>;
} else if (<var>condition</var>) {
	<var>statements</var>;
} else {
	<var>statements</var>;
}
</pre>

				<ul>
					<li>identical structure to Java's <code>if/else</code> statement</li>
					<li>JavaScript allows almost anything as a <var>condition</var></li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/js/js_obj_boolean.asp">Boolean</a> type
					<span class="readingsection">(7.3.3)</span>
				</h1>

<pre class="examplecode js">
var iLike190M = true;
var ieIsGood = &quot;IE6&quot; &gt; 0;   <span class="comment">// false</span>
if (&quot;web dev is great&quot;) {  <span class="comment">/* true */</span> }
if (0) {  <span class="comment">/* false */</span> }
</pre>

				<ul>
					<li>
						<img class="rightfigure" src="images/colbert.png" alt="Stephen Colbert is the man" />
						any value can be used as a <code>Boolean</code>
						<ul>
							<li>
								&quot;falsey&quot; values: <code>0</code>, <code>0.0</code>, <code>NaN</code>, <code>&quot;&quot;</code>, <code>null</code>, and <code>undefined</code> 
							</li>
							<li>&quot;truthy&quot; values: anything else</li>
						</ul>
					</li>
					<li>converting a value into a <code>Boolean</code> explicitly:
						<ul>
							<li><code>var boolValue = <em>Boolean(</em><var>otherValue</var><em>)</em>;</code></li>
							<li><code>var boolValue = <em>!!</em>(<var>otherValue</var>);</code></li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/js/js_loop_while.asp"><code>while</code></a> loops
					<span class="sameasjava">(same as Java)</span>
					<span class="readingsection">(7.3.5)</span>
				</h1>

<pre class="syntaxtemplate js">
while (<var>condition</var>) {
	<var>statements</var>;
}
</pre>

<pre class="syntaxtemplate js">
do {
	<var>statements</var>;
} while (<var>condition</var>);
</pre>

				<ul>
					<li><code><a href="http://www.w3schools.com/js/js_break.asp">break</a></code> and <code>continue</code> keywords also behave as in Java</li>
				</ul>
			</div>



			<div class="slide titleslide">
				<h1>7.4: Advanced JavaScript Syntax</h1>
				
				<ul>
					<li>
						7.1: Key JavaScript Concepts
					</li>
					<li>
						7.2: JavaScript Syntax
					</li>
					<li>
						7.3: Program Logic
					</li>
					<li>
						<strong>7.4: Advanced JavaScript Syntax</strong>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Scope, global and local variables
					<span class="readingsection">(7.4.1)</span>
				</h1>

<pre class="examplecode js">
<span class="comment">// global code; like &quot;main&quot;</span>
<em>var count = 1;</em>
f2();
f1();

function f1() { 
	var x = 999;
	<em>count = count * 10;</em>
}
function f2() { <em>count++;</em> }
</pre>

				<ul>
					<li>variable <code>count</code> above is <span class="term">global</span> (can be seen by all functions)</li>
					<li>variable <code>x</code> above is <span class="term">local</span> (can be seen by only <code>f1</code>)</li>
					<li>both <code>f1</code> and <code>f2</code> can use and modify <code>count</code> (what is its value?)</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/js/js_functions.asp">Function</a> parameters/return
					<span class="readingsection">(7.4.3)</span>
				</h1>

<pre class="syntaxtemplate js">
function <var>name</var>(<var>parameterName</var>, <var>...</var>, <var>parameterName</var>) {
	<var>statements</var>;
	return <var>expression</var>;
}
</pre>

<pre class="examplecode js">
function quadratic(a, b, c) {
	return -b + Math.sqrt(b * b - 4 * a * c) / (2 * a);
}
</pre>

				<ul>
					<li>parameter/return types are not written
						<ul>
							<li><code>var</code> is <em>not</em> written on parameter declarations</li>
							<li>functions with no <code>return</code> statement return <code>undefined</code></li>
						</ul>
					</li>
					<li>any variables declared in the function are local (exist only in that function)</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Calling functions
					<span class="sameasjava">(same as Java)</span>
				</h1>

<pre class="syntaxtemplate js">
<var>name</var>(<var>parameterValue</var>, <var>...</var>, <var>parameterValue</var>);
</pre>

<pre class="examplecode js">
var root = <em>quadratic(1, -3, 2)</em>;
</pre>

				<ul>
					<li>if the wrong number of parameters are passed:
						<ul>
							<li>too many? extra ones are ignored</li>
							<li>too few? remaining ones are given <code>undefined</code> value</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
			<h1>Common bug: spelling error</h1>

<pre class="examplecode js">
function foo() {
	<span class="emphasizedcode">Bar()</span>;   <span class="comment">// capitalized wrong</span>
<var>...</var>
function bar() {
	<var>...</var>
}
</pre>

				<ul>
					<li>if you misspell an identifier, the value <code>undefined</code> is used</li>
					<li>if you set <code>undefined</code> as an event handler, nothing happens (fails silently)</li>
					<li><strong>symptom</strong>: function doesn't get called, or a value is unexpectedly <code>undefined</code></li>
					<li><strong>fix</strong>: <a href="http://webster.cs.washington.edu/jslint/">JSLint</a> warns you if you use an undeclared identifier</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/js/js_obj_array.asp">Arrays</a>
					<span class="readingsection">(7.4.2)</span>
				</h1>

<pre class="syntaxtemplate js">
var <var>name</var> = [];                          <span class="comment">// empty array</span>
var <var>name</var> = [<var>value</var>, <var>value</var>, ..., <var>value</var>];   <span class="comment">// pre-filled</span>
<var>name</var>[<var>index</var>] = <var>value</var>;                     <span class="comment">// store element</span>
</pre>

<pre class="examplecode js">
var ducks = [&quot;Huey&quot;, &quot;Dewey&quot;, &quot;Louie&quot;];

var stooges = [];        <span class="comment">// stooges.length is 0</span>
stooges[0] = &quot;Larry&quot;;    <span class="comment">// stooges.length is 1</span>
stooges[1] = &quot;Moe&quot;;      <span class="comment">// stooges.length is 2</span>
stooges[4] = &quot;Curly&quot;;    <span class="comment">// stooges.length is 5</span>
stooges[4] = &quot;Shemp&quot;;    <span class="comment">// stooges.length is 5</span>
</pre>
				
				<ul>
					<li>two ways to initialize an array</li>
					<li><code>length</code> property (grows as needed when elements are added)</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Array <a href="http://www.w3schools.com/jsref/jsref_obj_array.asp">methods</a>
				</h1>

<pre class="examplecode js">
var a = [&quot;Stef&quot;, &quot;Jason&quot;];   <span class="comment">// Stef, Jason</span>
a.<em>push</em>(&quot;Brian&quot;);             <span class="comment">// Stef, Jason, Brian</span>
a.<em>unshift</em>(&quot;Kelly&quot;);          <span class="comment">// Kelly, Stef, Jason, Brian</span>
a.<em>pop</em>();                     <span class="comment">// Kelly, Stef, Jason</span>
a.<em>shift</em>();                   <span class="comment">// Stef, Jason</span>
a.<em>sort</em>();                    <span class="comment">// Jason, Stef</span>
</pre>

				<ul>
					<li>array serves as many data structures: list, queue, stack, ...</li>
					<li>methods:
						<a href="http://www.w3schools.com/jsref/jsref_concat_array.asp"><code>concat</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_join.asp"><code>join</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_pop.asp"><code>pop</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_push.asp"><code>push</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_reverse.asp"><code>reverse</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_shift.asp"><code>shift</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_slice_array.asp"><code>slice</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_sort.asp"><code>sort</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_splice.asp"><code>splice</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_toString_array.asp"><code>toString</code></a>, 
						<a href="http://www.w3schools.com/jsref/jsref_unshift.asp"><code>unshift</code></a>

						<ul>
							<li><code>pu<span class="slightemphasis">sh</span></code> and <code>pop</code> add / remove from back</li>
							<li><code>unshift</code> and <code><span class="slightemphasis">sh</span>ift</code> add / remove from front</li>
							<li><code>shift</code> and <code>pop</code> return the element that is removed</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Splitting strings:
					<a href="http://www.w3schools.com/jsref/jsref_split.asp"><code>split</code></a> and <a href="http://www.w3schools.com/jsref/jsref_join.asp"><code>join</code></a>
				</h1>

<pre class="examplecode js">
var s = &quot;the quick brown fox&quot;;
var a = s.<em>split</em>(&quot; &quot;);          <span class="comment">// [&quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;]</span>
a.reverse();                   <span class="comment">// [&quot;fox&quot;, &quot;brown&quot;, &quot;quick&quot;, &quot;the&quot;]</span>
s = a.<em>join</em>(&quot;!&quot;);               <span class="comment">// &quot;fox!brown!quick!the&quot;</span>
</pre>

				<ul>
					<li>
						<code>split</code> breaks apart a string into an array using a delimiter
						<ul>
							<li>
								can also be used with <span class="term">regular expressions</span> (seen later)
							</li>
						</ul>
					</li>
					<li><code>join</code> merges an array into a single string, placing a delimiter between them</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>
					<a href="http://www.w3schools.com/js/js_popup.asp">Popup boxes</a>
					<span class="readingsection">(7.4.4)</span>
				</h1>

<pre class="syntaxtemplate js">
alert(&quot;<var>message</var>&quot;);     <span class="comment">// message</span>
confirm(&quot;<var>message</var>&quot;);   <span class="comment">// returns true or false</span>
prompt(&quot;<var>message</var>&quot;);    <span class="comment">// returns user input string</span>
</pre>

				<div>
					<img src="images/alert.png" alt="alert" style="width: 30%" /> 
					<img src="images/confirm.png" alt="confirm" style="width: 30%" /> 
					<img src="images/prompt.png" alt="prompt" style="width: 30%" />
				</div>
			</div>



			<div class="slide titleslide">
				<h1>Extra random JavaScript stuff</h1>
				
				<ul>
					<li>
						7.1: Key JavaScript Concepts
					</li>
					<li>
						7.2: JavaScript Syntax
					</li>
					<li>
						7.3: Program Logic
					</li>
					<li>
						7.4: Advanced JavaScript Syntax
					</li>
					<li>
						<strong>Extra random JavaScript stuff</strong>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>JavaScript in HTML <code>body</code> (<a href="http://www.w3schools.com/js/tryit.asp?filename=tryjs_bodysection">example</a>)</h1>

<pre class="examplecode html">
<em>&lt;script type="text/javascript"&gt;</em>
	<span class="syntaxtemplate" style="line-height: 1.5em">JavaScript code</span>
<em>&lt;/script&gt;</em>
</pre>

				<ul>
					<li>JS code can be embedded within your HTML page's <code>head</code> or <code>body</code></li>
					<li>runs as the page is loading</li>
					<li>this is considered <em>bad style</em> and shouldn't be done in this course
						<ul>
							<li>mixes HTML content and JS scripts (bad)</li>
							<li>can cause your page not to validate</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>The <code>typeof</code> function</h1>

<pre class="examplecode js">
typeof(<var>value</var>)
</pre>

				<ul>
					<li>given these declarations:
						<ul>
							<li><code>function foo() { alert(&quot;Hello&quot;); }</code></li>
							<li><code>var a = [&quot;Huey&quot;, &quot;Dewey&quot;, &quot;Louie&quot;];</code></li>
						</ul>
					</li>
				</ul>

				<ul>
					<li>The following statements are <code>true</code>:
						<ul>
							<li><code>typeof(3.14) === &quot;number&quot;</code></li>
							<li><code>typeof(&quot;hello&quot;) === &quot;string&quot;</code></li>
							<li><code>typeof(true) === &quot;boolean&quot;</code></li>
							<li><code>typeof(foo) === &quot;function&quot;</code></li>
							<li><code>typeof(a) === <em>&quot;object&quot;</em></code></li>
							<li><code>typeof(null) === <em>&quot;object&quot;</em></code></li>
							<li><code>typeof(undefined) === &quot;undefined&quot;</code></li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>The <code>arguments</code> array</h1>

<pre class="examplecode js">
function example() {
	for (var i = 0; i &lt; <em>arguments</em>.length; i++) {
		alert(<em>arguments[i]</em>);
	}
}

example(&quot;how&quot;, &quot;are&quot;, &quot;you&quot;);   <span class="comment">// alerts 3 times</span>
</pre>

				<ul>
					<li>every function contains an array named <code>arguments</code> representing the parameters passed</li>
					<li>can loop over them, print/alert them, etc.</li>
					<li>allows you to write functions that accept varying numbers of parameters</li>
				</ul>
			</div>



			<div class="slide">
				<h1>The &quot;<a href="http://www.w3schools.com/js/js_loop_for_in.asp">for each</a>&quot; loop</h1>

<pre class="examplecode js">
for (var <var>name</var> in <var>arrayOrObject</var>) {
	<var>do something with arrayOrObject</var>[<var>name</var>];
}
</pre>

				<ul>
					<li>loops over every index of the array, or every property name of the object</li>
					<li>using this is actually discouraged, for reasons we'll see later</li>
				</ul>
			</div>

			
			
			<div class="slide">
				<h1>Associative arrays / maps</h1>

<pre class="examplecode js">
var map = [];
map[42] = &quot;the answer&quot;;
map[3.14] = &quot;pi&quot;;
map[&quot;champ&quot;] = &quot;suns&quot;;
</pre>

				<ul>
					<li>the indexes of a JS array need not be integers</li>
					<li>this allows you to store <em>mappings</em> between an index of any type (&quot;keys&quot;) and value</li>
					<li>similar to Java's <code>Map</code> collection or PHP's associative arrays</li>
				</ul>
			</div>



			<div class="slide">
				<h1><a href="http://www.w3schools.com/jsref/jsref_obj_date.asp">Date</a> object</h1>

<pre class="examplecode js">
var today = <em>new Date()</em>;               <span class="comment">// today</span>
var midterm = <em>new Date(2007, 4, 4)</em>;   <span class="comment">// May 4, 2007</span>
</pre>

				<ul>
					<li>methods
						<ul>
							<li>
								<code><a href="http://www.w3schools.com/jsref/jsref_getDate.asp">getDate</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_getDay.asp">getDay</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_getMonth.asp">getMonth</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_getFullYear.asp">getFullYear</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_getHours.asp">getHours</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_getMinutes.asp">getMinutes</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_getSeconds.asp">getSeconds</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_getMilliseconds.asp">getMilliseconds</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_getTime.asp">getTime</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_getTimezoneOffset.asp">getTimezoneOffset</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_parse.asp">parse</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_setDate.asp">setDate</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_setMonth.asp">setMonth</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_setFullYear.asp">setFullYear</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_setHours.asp">setHours</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_setMinutes.asp">setMinutes</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_setSeconds.asp">setSeconds</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_setMilliseconds.asp">setMilliseconds</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_setTime.asp">setTime</a></code>, 
								<code><a href="http://www.w3schools.com/jsref/jsref_toString.asp">toString</a></code>
							</li>
						</ul>
					</li>
					<li>quirks
						<ul>
							<li><code>getYear</code> returns a 2-digit year; use <code>getFullYear</code> instead</li>
							<li><code>getDay</code> returns day of week from 0 (Sun) through 6 (Sat)</li>
							<li><code>getDate</code> returns day of month from 1 to (# of days in month)</li>
							<li><code>Date</code> stores month from 0-11 (not from 1-12)</li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Injecting Dynamic Text: <code>document.write</code></h1>

<pre class="examplecode js">
document.write(&quot;<var>message</var>&quot;);
</pre>

				<ul>
					<li>prints specified text into the HTML page</li>
					<li>this is very bad style; this is how newbs program JavaScript:
						<ul>
							<li>putting JS code in the HTML file's <code>body</code></li>
							<li>having that code use <code>document.write</code></li>
							<li>(this is awful style and a poor substitute for server-side PHP programming)</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>The <a href="http://www.w3schools.com/jsref/jsref_eval.asp"><code>eval</code> </a>(evil?) function</h1>
				
<pre class="syntaxtemplate js">
eval(&quot;<var>JavaScript code</var>&quot;);
</pre>

<pre class="examplecode js">
eval(&quot;var x = 7; x++; alert(x / 2);&quot;);  <span class="comment">// alerts 4</span>
</pre>
				
				<div class="rightfigure">
					<img src="images/drevil.png" alt="Dr. Evil" style="width: 100%" />
				</div>
				
				<ul>
					<li><code>eval</code> treats a String as JavaScript code and runs that code</li>
					<li>this is occasionally useful, but usually a very <em>bad idea</em>
						<ul>
							<li>strings from user input can cause arbitrary code execution</li>
							<li>leads to bugs and security problems; do not use</li>
						</ul>
					</li>
				</ul>
			</div>



<!--#include virtual="commonbottom.html" -->
