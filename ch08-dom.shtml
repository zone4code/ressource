<!--#include virtual="commontop.html" -->
		<title>Web Programming Step by Step, Chapter 8: Document Object Model</title>
	</head>

	<body>
		<div class="layout">
			<div id="controls"><!-- DO NOT EDIT --></div>
			<div id="currentSlide"><!-- DO NOT EDIT --></div>
			<div id="header"></div>
			<div id="footer">
				<h1><em>Web Programming Step by Step</em>, Chapter 8</h1>
				<h2>The Document Object Model (DOM)</h2>
			</div>
		</div>

		<div class="presentation">
			<div class="slide">
				<h1>
					<a href="http://www.webstepbook.com/">
						Web Programming Step by Step
					</a>
				</h1>
				
				<h3>
					Chapter 8 <br />
					The Document Object Model (DOM)
				</h3>

				<p class="license">
					Except where otherwise noted, the contents of this presentation are Copyright 2009 Marty Stepp and Jessica Miller.
				</p>

				<div class="w3c">
					<a href="http://validator.w3.org/check/referer"><img src="images/w3c-xhtml11.png" alt="Valid XHTML 1.1" /></a>
					<a href="http://jigsaw.w3.org/css-validator/check/referer"><img src="images/w3c-css.png" alt="Valid CSS!" /></a>
				</div>
			</div>



			<div class="slide titleslide">
				<h1>8.1: Global DOM Objects</h1>
				
				<ul>
					<li>
						<strong>8.1: Global DOM Objects</strong>
					</li>
					<li>
						8.2: DOM Element Objects
					</li>
					<li>
						8.3: The DOM Tree
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>The six global DOM objects</h1>

				<p>Every Javascript program can refer to the following global objects:</p>

				<table class="standard">
					<tr>
						<th>name</th><th>description</th>
					</tr>
					
					<tr>
						<td>
							<code><a href="http://www.w3schools.com/htmldom/dom_obj_document.asp">document</a></code>
						</td>
						<td>
							current HTML page and its content
						</td>
					</tr>
					
					<tr>
						<td>
							<code><a href="http://www.w3schools.com/htmldom/dom_obj_history.asp">history</a></code>
						</td>
						<td>
							list of pages the user has visited
						</td>
					</tr>

					<tr>
						<td>
							<code><a href="http://www.w3schools.com/htmldom/dom_obj_location.asp">location</a></code>
						</td>
						<td>
							URL of the current HTML page
						</td>
					</tr>
					
					<tr>
						<td>
							<code><a href="http://www.w3schools.com/htmldom/dom_obj_navigator.asp">navigator</a></code>
						</td>
						<td>
							info about the web browser you are using
						</td>
					</tr>

					<tr>
						<td>
							<code><a href="http://www.w3schools.com/htmldom/dom_obj_screen.asp">screen</a></code>
						</td>
						<td>
							info about the screen area occupied by the browser
						</td>
					</tr>
					
					<tr>
						<td>
							<code><a href="http://www.w3schools.com/htmldom/dom_obj_window.asp">window</a></code>
						</td>
						<td>
							the browser window
						</td>
					</tr>
				</table>
			</div>



			<div class="slide">
				<h1>The <a href="http://www.w3schools.com/htmldom/dom_obj_window.asp"><code>window</code></a> object</h1>

				<p class="description">
					the entire browser window; the top-level object in DOM hierarchy
				</p>

				<ul>
					<li>technically, all global code and variables become part of the <code>window</code> object</li>

					<li>properties:
						<ul>
							<li>
							<a href="http://www.w3schools.com/htmldom/dom_obj_document.asp"><code>document</code></a>, 
							<a href="http://www.w3schools.com/htmldom/dom_obj_history.asp"><code>history</code></a>, 
							<a href="http://www.w3schools.com/htmldom/dom_obj_location.asp"><code>location</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_win_name.asp"><code>name</code></a>
							</li>
						</ul>
					</li>

					<li>methods:
						<ul>
							<li>
								<a href="http://www.w3schools.com/htmldom/met_win_alert.asp"><code>alert</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_confirm.asp"><code>confirm</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_prompt.asp"><code>prompt</code></a> (popup boxes)
							</li>

							<li>
								<a href="http://www.w3schools.com/htmldom/met_win_setInterval.asp"><code>setInterval</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_setTimeout.asp"><code>setTimeout</code></a>
								<a href="http://www.w3schools.com/htmldom/met_win_clearInterval.asp"><code>clearInterval</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_clearTimeout.asp"><code>clearTimeout</code></a> (timers)
							</li>

							<li>
								<a href="http://www.w3schools.com/htmldom/met_win_open.asp"><code>open</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_close.asp"><code>close</code></a> (popping up new browser windows)
							</li>

							<li>
								<a href="http://www.w3schools.com/htmldom/met_win_blur.asp"><code>blur</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_focus.asp"><code>focus</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_moveBy.asp"><code>moveBy</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_moveTo.asp"><code>moveTo</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_print.asp"><code>print</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_resizeBy.asp"><code>resizeBy</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_resizeTo.asp"><code>resizeTo</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_scrollBy.asp"><code>scrollBy</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_win_scrollTo.asp"><code>scrollTo</code></a>
							</li>
						</ul>
					</li>
				</ul>
			</div>



			<!--
			<div class="slide">
				<h1>Popup windows with <code>window.open</code></h1>
	
<pre class="examplecode js">
<em>window.open</em>(&quot;http://foo.com/bar.html&quot;, &quot;My Foo Window&quot;,
            &quot;width=900,height=600,scrollbars=1&quot;);
</pre>

				<hr class="spacedrule" />

				<ul>
					<li><a href="http://www.w3schools.com/htmldom/met_win_open.asp"><code>window.open</code></a> pops up a new browser window</li>
					<li>THIS method is the cause of all the terrible popups on the web!</li>
					<li>some popup blocker software will prevent this method from running</li>
				</ul>
			</div>
			-->



			<div class="slide">
				<h1>The <a href="http://www.w3schools.com/htmldom/dom_obj_document.asp"><code>document</code></a> object</h1>

				<p class="description">
					the current web page and the elements inside it
				</p>

				<ul>
					<li>properties:
						<ul>
							<li>
							<a href="http://www.w3schools.com/htmldom/coll_doc_anchors.asp"><code>anchors</code></a>, 
							<code>body</code>, 
							<a href="http://www.w3schools.com/htmldom/prop_doc_cookie.asp"><code>cookie</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_doc_domain.asp"><code>domain</code></a>, 
							<a href="http://www.w3schools.com/htmldom/coll_doc_forms.asp"><code>forms</code></a>, 
							<a href="http://www.w3schools.com/htmldom/coll_doc_images.asp"><code>images</code></a>, 
							<a href="http://www.w3schools.com/htmldom/coll_doc_links.asp"><code>links</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_doc_referrer.asp"><code>referrer</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_doc_title.asp"><code>title</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_doc_url.asp"><code>URL</code></a>
							</li>
						</ul>
					</li>

					<li>methods:
						<ul>
							<li><a href="http://www.w3schools.com/htmldom/met_doc_getelementbyid.asp"><code>getElementById</code></a></li>
							<li><a href="http://www.w3schools.com/htmldom/met_doc_getelementsbyname.asp"><code>getElementsByName</code></a></li>
							<li><a href="http://www.w3schools.com/htmldom/met_doc_getelementsbytagname.asp"><code>getElementsByTagName</code></a></li>
							<li>
								<a href="http://www.w3schools.com/htmldom/met_doc_close.asp"><code>close</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_doc_open.asp"><code>open</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_doc_write.asp"><code>write</code></a>, 
								<a href="http://www.w3schools.com/htmldom/met_doc_writeln.asp"><code>writeln</code></a>
							</li>
						</ul>
					</li>
					<li><a href="http://www.w3schools.com/htmldom/dom_obj_document.asp">complete list</a></li>
				</ul>
			</div>



			<div class="slide">
				<h1>The <a href="http://www.w3schools.com/htmldom/dom_obj_location.asp"><code>location</code></a> object</h1>

				<p class="description">
					the URL of the current web page
				</p>

				<ul>
					<li>properties:
						<ul>
							<li>
							<a href="http://www.w3schools.com/htmldom/prop_loc_host.asp"><code>host</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_loc_hostname.asp"><code>hostname</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_loc_href.asp"><code>href</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_loc_pathname.asp"><code>pathname</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_loc_port.asp"><code>port</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_loc_protocol.asp"><code>protocol</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_loc_search.asp"><code>search</code></a>
							</li>
						</ul>
					</li>

					<li>methods:
						<ul>
							<li>
							<a href="http://www.w3schools.com/htmldom/met_loc_assign.asp"><code>assign</code></a>, 
							<a href="http://www.w3schools.com/htmldom/met_loc_reload.asp"><code>reload</code></a>, 
							<a href="http://www.w3schools.com/htmldom/met_loc_replace.asp"><code>replace</code></a>
							</li>
						</ul>
					</li>
					<li><a href="http://www.w3schools.com/htmldom/dom_obj_location.asp">complete list</a></li>
				</ul>

			</div>



			<div class="slide">
				<h1>The <a href="http://www.w3schools.com/htmldom/dom_obj_navigator.asp"><code>navigator</code></a> object</h1>

				<p class="description">
					information about the web browser application
				</p>

				<ul>
					<li>properties:
						<ul>
							<li>
								<a href="http://www.w3schools.com/htmldom/prop_nav_appname.asp"><code>appName</code></a>, 
								<a href="http://www.w3schools.com/htmldom/prop_nav_appversion.asp"><code>appVersion</code></a>, 
								<a href="http://www.w3schools.com/htmldom/prop_nav_browserlanguage.asp"><code>browserLanguage</code></a>, 
								<a href="http://www.w3schools.com/htmldom/prop_nav_cookieenabled.asp"><code>cookieEnabled</code></a>, 
								<a href="http://www.w3schools.com/htmldom/prop_nav_platform.asp"><code>platform</code></a>, 
								<a href="http://www.w3schools.com/htmldom/prop_nav_useragent.asp"><code>userAgent</code></a>
							</li>
							<li><a href="http://www.w3schools.com/htmldom/dom_obj_navigator.asp">complete list</a></li>
						</ul>
					</li>

					<li>
						Some web programmers examine the <code>navigator</code> object to see what browser is being used, and write browser-specific scripts and hacks:

						<pre class="examplecode js">
if (navigator.appName === &quot;Microsoft Internet Explorer&quot;) { ...
</pre>

						<ul>
							<li>(this is poor style; you should not need to do this)</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>The <a href="http://www.w3schools.com/htmldom/dom_obj_screen.asp"><code>screen</code></a> object</h1>

				<p class="description">
					information about the client's display screen
				</p>

				<ul>
					<li>properties:
						<ul>
							<li>
							<a href="http://www.w3schools.com/htmldom/prop_screen_availheight.asp"><code>availHeight</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_screen_availwidth.asp"><code>availWidth</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_screen_colordepth.asp"><code>colorDepth</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_screen_height.asp"><code>height</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_screen_pixeldepth.asp"><code>pixelDepth</code></a>, 
							<a href="http://www.w3schools.com/htmldom/prop_screen_width.asp"><code>width</code></a>
							</li>
							<li><a href="http://www.w3schools.com/htmldom/dom_obj_screen.asp">complete list</a></li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>The <a href="http://www.w3schools.com/htmldom/dom_obj_history.asp"><code>history</code></a> object</h1>

				<p class="description">
					the list of sites the browser has visited in this window
				</p>
				
				<ul>
					<li>properties:
						<ul>
							<li>
							<a href="http://www.w3schools.com/htmldom/prop_his_length.asp"><code>length</code></a>
							</li>
						</ul>
					</li>

					<li>methods:
						<ul>
							<li>
							<a href="http://www.w3schools.com/htmldom/met_his_back.asp"><code>back</code></a>, 
							<a href="http://www.w3schools.com/htmldom/met_his_forward.asp"><code>forward</code></a>, 
							<a href="http://www.w3schools.com/htmldom/met_his_go.asp"><code>go</code></a>
							</li>
						</ul>
					</li>
					<li><a href="http://www.w3schools.com/htmldom/dom_obj_history.asp">complete list</a></li>
					<li>sometimes the browser won't let scripts view <code>history</code> properties, for security</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Unobtrusive JavaScript
					<span class="readingsection">(8.1.1)</span>
				</h1>

				<ul>
					<li>JavaScript event code seen previously was <em>obtrusive</em>, in the HTML; this is bad style</li>
					<li>now we'll see how to write <a href="http://en.wikipedia.org/wiki/Unobtrusive_JavaScript"><em>unobtrusive</em> JavaScript</a> code
						<ul>
							<li>HTML with minimal JavaScript inside</li>
							<li>uses the DOM to attach and execute all JavaScript functions</li>
						</ul>
					</li>
					<li>allows <a href="http://alistapart.com/articles/behavioralseparation">separation</a> of web site into 3 major categories:
						<ul>
							<li><span class="term">content</span> (HTML) - what is it?</li>
							<li><span class="term">presentation</span> (CSS) - how does it look?</li>
							<li><span class="term">behavior</span> (JavaScript) - how does it respond to user interaction?</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Obtrusive event handlers (bad)</h1>

				<div class="example">
					<pre class="examplecode html">
&lt;button id=&quot;ok&quot; <em class="bad">onclick=&quot;okayClick();&quot;</em>&gt;OK&lt;/button&gt;
</pre>

					<pre class="examplecode js">
<span class="comment">// called when OK button is clicked</span>
function okayClick() {
	alert(&quot;booyah&quot;);
}
</pre>

					<div class="exampleoutput insertoutput"></div>
				</div>

				<ul>
					<li>this is bad style (HTML is cluttered with JS code)</li>
					<li>goal: remove all JavaScript code from page's body</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Attaching an event handler in JavaScript code</h1>

				<pre class="syntaxtemplate js">
<span class="comment">// where <var>element</var> is a DOM element object</span>
<var>element</var>.<var>event</var> = <var>function</var>;
</pre>

				<div class="example">
					<pre class="examplecode js">
var okButton = document.getElementById(&quot;ok&quot;);
okButton.<em>onclick</em> = <em>okayClick</em>;
</pre>

					<div class="exampleoutput insertoutput">
						<button id="ok">OK</button>
					</div>
				</div>
				
				<ul>
					<li>it is legal to attach event handlers to elements' DOM objects in your JavaScript code</li>
					<li>this is better style than attaching them in the XHTML</li>
					<li>Where should we put the above code?</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>A failed attempt at being unobtrusive</h1>

				<div class="example">
<pre class="examplecode html">
	&lt;head&gt;
		<em>&lt;script src=&quot;myfile.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</em>
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div&gt;&lt;button id=&quot;ok&quot;&gt;OK&lt;/button&gt;&lt;/div&gt;
</pre>

<pre class="examplecode examplecode2 examplecodelast js">
<span class="comment">// global code</span>
var okButton = document.getElementById(&quot;ok&quot;);
okButton.onclick = okayClick;   <span class="comment">// error: okButton is undefined</span>
</pre>
				</div>
				
				<ul>
					<li>problem: global JS code runs the moment the script is loaded</li>
					<li>script in <code>head</code> is processed before page's <code>body</code> has loaded
						<ul>
							<li>no elements are available yet or can be accessed yet via the DOM</li>
						</ul>
					</li>
					<li>we need a way to attach the handler just as the page finishes loading</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					The <code>window.onload</code> event
					<span class="readingsection">(8.1.1)</span>
				</h1>

<pre class="syntaxtemplate js">
<em>window.onload = <var>functionName</var>;</em>   // global code

<span class="comment">// this will run once the page has finished loading</span>
function <var>functionName</var>() {
	<var>element</var>.<var>event</var> = <var>functionName</var>;
	<var>element</var>.<var>event</var> = <var>functionName</var>;
	...
}
</pre>
				
				<ul>
					<li>we want to attach our event handlers right after the page is done loading</li>
						<ul>
							<li>there is a global event called <code>window.onload</code> event that occurs at that moment</li>
						</ul>
					<li>in <code>window.onload</code> handler we attach all the other handlers to run when events occur</li>
				</ul>
			</div>



			<div class="slide">
				<h1>An unobtrusive event handler</h1>

				<div class="example">
					<pre class="examplecode html">
<span class="comment">&lt;!-- look Ma, no JavaScript! --&gt;</span>
&lt;button id=&quot;ok&quot;&gt;OK&lt;/button&gt;
</pre>

					<pre class="examplecode examplecode2 js">
<em>window.onload = pageLoad;</em>  <span class="comment">// global code</span>

<span class="comment">// called when page loads; sets up event handlers</span>
function pageLoad() {
	var okButton = document.getElementById(&quot;ok&quot;);
	<em>okButton.onclick = okayClick;</em>
}

function okayClick() {
	alert(&quot;booyah&quot;);
}
</pre>
					<div class="exampleoutput">
						<button onclick="alert('booyah');">OK</button>
					</div>
				</div>
			</div>



			<div class="slide">
				<h1>Common unobtrusive JS errors</h1>
				
				<ul>
					<li>many students mistakenly write <code>()</code> when attaching the handler

<pre class="examplecode js">
<del>window.onload = pageLoad();</del>
window.onload = <em>pageLoad</em>;

<del>okButton.onclick = okayClick();</del>
okButton.onclick = <em>okayClick</em>;
</pre>

						<ul>
							<li>our <span class="term">JSLint</span> checker will catch this mistake</li>
						</ul>
					</li>

					<li>event names are all lowercase, not capitalized like most variables

<pre class="examplecode js">
<del>window.onLoad = pageLoad;</del>
window.<em>onload</em> = pageLoad;
</pre>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Anonymous functions
					<span class="readingsection">(8.1.2)</span>
				</h1>

				<pre class="syntaxtemplate js">
function(<var>parameters</var>) {
	<var>statements</var>;
}
</pre>

				<ul>
					<li>JavaScript allows you to declare <span class="term">anonymous functions</span></li>
					<li>quickly creates a function without giving it a name</li>
					<li>can be stored as a variable, attached as an event handler, etc.</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Anonymous function example</h1>

				<div class="example">
					<pre class="examplecode js">
window.onload = <em>function() {</em>
	var okButton = document.getElementById(&quot;ok&quot;);
	okButton.onclick = okayClick;
<em>};</em>

function okayClick() {
	alert(&quot;booyah&quot;);
}
</pre>
					<div class="exampleoutput">
						<button onclick="alert('booyah');">OK</button>
					</div>
				</div>
				
				<p>
					or the following is also legal (though harder to read and bad style):
				</p>

<pre class="examplecode js">
window.onload = <em>function() {</em>
	var okButton = document.getElementById(&quot;ok&quot;);
	okButton.onclick = <em>function() {</em>
		alert(&quot;booyah&quot;);
	<em>};</em>
<em>};</em>
</pre>
			</div>
			
			
			
			<div class="slide">
				<h1>
					The keyword <code>this</code>
					<span class="readingsection">(8.1.3)</span>
				</h1>
				
<pre class="examplecode js">
window.onload = pageLoad;

function pageLoad() {
	var okButton = document.getElementById(&quot;ok&quot;);
	okButton.onclick = okayClick;  <span class="comment">// bound to okButton here</span>
}

function okayClick() {           <span class="comment">// okayClick knows what DOM object</span>
	<em>this</em>.innerHTML = &quot;booyah&quot;;     <span class="comment">// it was called on</span>
}
</pre>

				<ul>
					<li>event handlers attached unobtrusively are <span class="term">bound</span> to the element</li>
					<li>inside the handler, the element can refer to itself as <code>this</code>
						<ul>
							<li>also useful when the same handler is shared on multiple elements</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Fixing redundant code with <code>this</code></h1>
				
<pre class="examplecode html">
&lt;fieldset&gt;
	&lt;label&gt;&lt;input id=&quot;Huey&quot;  type=&quot;radio&quot; name=&quot;ducks&quot; /&gt; Huey&lt;/label&gt;
	&lt;label&gt;&lt;input id=&quot;Dewey&quot; type=&quot;radio&quot; name=&quot;ducks&quot; /&gt; Dewey&lt;/label&gt;
	&lt;label&gt;&lt;input id=&quot;Louie&quot; type=&quot;radio&quot; name=&quot;ducks&quot; /&gt; Louie&lt;/label&gt;
&lt;/fieldset&gt;
</pre>

<pre class="examplecode js">
function processDucks() {
<del class="bad">	if (document.getElementById(&quot;huey&quot;).checked) {
		alert(&quot;Huey is checked!&quot;);
	} else if (document.getElementById(&quot;dewey&quot;).checked) {
		alert(&quot;Dewey is checked!&quot;);
	} else {
		alert(&quot;Louie is checked!&quot;);
	}</del>
	<span class="errorfixed">alert(<em>this.id + </em>&quot; is checked!&quot;);</span>
}
</pre>
			</div>



			<div class="slide titleslide">
				<h1>8.2: DOM Element Objects</h1>
				
				<ul>
					<li>
						8.1: Global DOM Objects
					</li>
					<li>
						<strong>8.2: DOM Element Objects</strong>
					</li>
					<li>
						8.3: The DOM Tree
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Modifying text inside an element
					<span class="readingsection">(8.2.1)</span>
				</h1>
				
<pre class="examplecode js">
var paragraph = document.getElementById(&quot;welcome&quot;);
<em>paragraph.innerHTML =</em> &quot;Welcome to our site!&quot;;  <span class="comment">// change text on page</span>
</pre>

				<p>
					DOM element objects have the following properties:
				</p>

				<ul>
					<li><code>innerHTML</code> : text and/or HTML tags inside a node</li>
					<li><code>textContent</code> : text (no HTML tags) inside a node
						<ul>
							<li>
								simpler than <code>innerHTML</code>, but not supported in IE6
							</li>
						</ul>
					</li>
					<li><code>value</code> : the value inside a form control</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Abuse of <code>innerHTML</code></h1>
				
<pre class="examplecode js badcode">
<span class="comment">// bad style!</span>
var paragraph = document.getElementById(&quot;welcome&quot;);
paragraph.innerHTML = <em class="bad">&quot;&lt;p&gt;text and &lt;a href=&quot;page.html&quot;&gt;link&lt;/a&gt;&quot;</em>;
</pre>

				<ul>
					<li><code>innerHTML</code> can inject arbitrary HTML content into the page</li>
					<li>however, this is prone to bugs and errors and is considered poor style</li>
					<li>we forbid using <code>innerHTML</code> to inject HTML tags;  inject plain text only
						<ul>
							<li>so how do we add content with HTML tags in it to the page?</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Adjusting styles with the DOM
					<span class="readingsection">(8.2.2)</span>
				</h1>

				<div class="example">
					<pre class="examplecode html">
&lt;button id=&quot;clickme&quot;&gt;Color Me&lt;/button&gt;
</pre>

					<pre class="examplecode examplecode2 js">
window.onload = function() {
	document.getElementById(&quot;clickme&quot;).onclick = changeColor;
};
function changeColor() {
	var clickMe = document.getElementById(&quot;clickme&quot;);
	<em>clickMe.style</em>.color = &quot;red&quot;;
}
</pre>

					<div class="exampleoutput">
						<button onclick="this.style.color = 'red';">Color Me</button>
					</div>
				</div>

				<ul>
					<li><a class="popup" href="http://www.w3schools.com/HTMLDOM/dom_obj_style.asp"><code>style</code></a> property lets you set any CSS style for an element</li>
					<li>contains same properties as in CSS, but with <code>camelCasedNames</code>
						<ul>
							<li>examples: <code>backgroundColor</code>, <code>borderLeftWidth</code>, <code>fontFamily</code></li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Common DOM styling errors</h1>

				<ul>
					<li>many students forget to write <code>.style</code> when setting styles

<pre class="examplecode js">
var clickMe = document.getElementById(&quot;clickme&quot;);
<del>clickMe.color = &quot;red&quot;;</del>
clickMe<em>.style</em>.color = &quot;red&quot;;
</pre>
					</li>

					<li>style properties are capitalized <code>likeThis</code>, not <code>like-this</code>

<pre class="examplecode js">
<del>clickMe.style.font-size = &quot;14pt&quot;;</del>
clickMe.style.<em>fontSize</em> = &quot;14pt&quot;;
</pre>
					</li>

					<li>style properties must be set as strings, often with units at the end

<pre class="examplecode js">
<del>clickMe.style.width = 200;</del>
clickMe.style.width = <em>&quot;200px&quot;</em>;
clickMe.style.padding = <em>&quot;0.5em&quot;</em>;
</pre>
						
						<ul>
							<li>write the value you would have written in the CSS, but in quotes</li>
						</ul>
					</li>
				</ul>
			</div>



			<!--
			<div class="slide">
				<h1>COMMON BUG: incorrect units on styles</h1>

<pre class="examplecode js">
theDiv.style.left = x;   <span class="comment">// BAD! should be x + "px"</span>
theDiv.style.backgroundPosition = x + "px" + y + "px";    <span class="comment">// BAD! missing space</span>
</pre>

				<ul>
					<li>all CSS property values must be Strings, and many require units and/or a specific format</li>
					<li><span class="term">Manifestation of bug</span>: code fails silently; style is not set</li>
					<li><span class="term">Detection</span>: use Firebug debugger, step through code and look at <code>style</code></li>
					<li><span class="term">Detection</span>: use an <code>alert</code> immediately after style property is set

<pre class="examplecode js">
theDiv.style.left = 100;   <span class="comment">// BAD!</span>
<span class="emphasizedcode">alert(&quot;div left is &quot; + theDiv.style.left);</span>
</pre>

					</li>
				</ul>
			</div>
			-->
			
			
			
			<!-- *** font enlarger -->
			
			
			
			<div class="slide">
				<h1>
					Unobtrusive styling
					<span class="readingsection">(8.2.3)</span>
				</h1>

<pre class="examplecode js">
function okayClick() {
	<del>this.style.color = &quot;red&quot;;</del>
	this.<em>className = &quot;highlighted&quot;</em>;
}
</pre>

<pre class="examplecode css">
.<em>highlighted</em> { color: red; }
</pre>
				
				<ul>
					<li>well-written JavaScript code should contain as little CSS as possible</li>
					<li>use JS to set CSS classes/IDs on elements</li>
					<li>define the styles of those classes/IDs in your CSS file</li>
				</ul>
			</div>
			
			
			
			<div class="slide titleslide">
				<h1>8.3: The DOM Tree</h1>
				
				<ul>
					<li>
						8.1: Global DOM Objects
					</li>
					<li>
						8.2: DOM Element Objects
					</li>
					<li>
						<strong>8.3: The DOM Tree</strong>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Complex DOM manipulation problems</h1>
				
				<p>
					How would we do each of the following in JavaScript code?  Each involves modifying each one of a group of elements ...
				</p>
				
				<ul>
					<li>When the Go button is clicked, reposition all the <code>div</code>s of class <code>puzzle</code> to random x/y locations.</li>
					<li>When the user hovers over the maze boundary, turn all maze walls red.</li>
					<li>Change every other item in the <code>ul</code> list with <code>id</code> of <code>TAs</code> to have a gray background.</li>
				</ul>
			</div>



			<div class="slide">
				<h1>The tree of DOM objects</h1>
				
				<ul>
					<li>
						The elements of a page are nested into a tree-like structure of objects
						<ul>
							<li>
								the DOM has properties and methods for traversing this tree
							</li>
						</ul>
					</li>
				</ul>
				
				<div class="figure">
					<img src="images/dom_tree.gif" alt="DOM tree" />
				</div>
			</div>



			<div class="slide">
				<h1>
					Types of DOM nodes
					<span class="readingsection">(8.3.1)</span>
				</h1>

<pre class="examplecode html">
&lt;p&gt;
	This is a paragraph of text with a 
	&lt;a href=&quot;/path/to/another/page.html&quot;&gt;link&lt;/a&gt;.
&lt;/p&gt;
</pre>

				<div class="rightfigure" style="width: 33%">
					<img src="images/figure_4_dom_tree.png" alt="DOM Tree" style="width: 100%" />
				</div>
				
				<ul>
					<li><img src="images/element_node.png" alt="element node" />
					<strong>element nodes</strong> (HTML tag)
						<ul>
							<li>can have children and/or attributes</li>
						</ul>
					</li>

					<li><img src="images/text_node.png" alt="text node" />
					<strong>text nodes</strong> (text in a block element)
					</li>

					<li><img src="images/attribute_node.png" alt="attribute node" />
					<strong>attribute nodes</strong> (attribute/value pair)
						<ul>
							<li>text/attributes are children in an element node</li>
							<li>they cannot have children or attributes</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>
					Traversing the DOM tree
					<span class="readingsection">(8.3.2 - 8.3.3)</span>
				</h1>

				<p>
					every node's DOM object has the following properties:
				</p>

				<table class="standard">
					<tr>
						<th>
							name(s)
						</th>
						<th>
							description
						</th>
					</tr>
					
					<tr>
						<td>
							<code>firstChild</code>, <code>lastChild</code>
						</td>
						<td>
							start/end of this node's list of children
						</td>
					</tr>
					
					<tr>
						<td>
							<code>childNodes</code>
						</td>
						<td>
							array of all this node's children
						</td>
					</tr>
					
					<tr>
						<td>
							<code>nextSibling</code>, <code>previousSibling</code>
						</td>
						<td>
							neighboring nodes with the same parent
						</td>
					</tr>
					
					<tr>
						<td>
							<code>parentNode</code>
						</td>
						<td>
							the element that contains this node
						</td>
					</tr>
				</table>

				<ul>
					<li><a href="http://www.w3schools.com/dom/dom_node.asp">complete list of DOM node properties</a></li>
					<li><a href="http://www.w3schools.com/dom/dom_mozilla_vs_ie.asp">browser incompatiblity information</a> (IE6 sucks)</li>

					<!--
					<li><a href="http://www.w3schools.com/dom/dom_nodes_info.asp">other properties</a>: <code>nodeName</code>, <code>nodeType</code>, <code>nodeValue</code></li>
					-->
				</ul>
			</div>



			<div class="slide">
				<h1>DOM tree traversal example</h1>

<pre class="examplecode html">
&lt;p id=&quot;foo&quot;&gt;This is a paragraph of text with a 
	&lt;a href=&quot;/path/to/another/page.html&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
</pre>

				<div class="centerfigure">
					<img src="images/figure_5_tree_structure.png" alt="navigate tree" style="width: 38%" />
				</div>
			</div>
			
			

			<div class="slide">
				<h1>Element vs. text nodes</h1>
				
<pre class="examplecode html">
&lt;div&gt;
	&lt;p&gt;
		This is a paragraph of text with a 
		&lt;a href=&quot;page.html&quot;&gt;link&lt;/a&gt;.
	&lt;/p&gt;
&lt;/div&gt;
</pre>
				
				<ul>
					<li>Q: How many children does the <code>div</code> above have?</li>
					<li class="incremental">A: 3
						<ul>
							<li>an element node representing the &lt;p&gt;</li>
							<li>two <em>text nodes</em> representing <code>&quot;\n\t&quot;</code> (before/after the paragraph)</li>
						</ul>
					</li>
					<li>
						Q: How many children does the paragraph have?  The <code>a</code> tag?
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>
					Selecting groups of DOM objects
					<span class="readingsection">(8.3.5)</span>
				</h1>

				<ul>
					<li>
						methods in <code>document</code> and other DOM objects for accessing descendents:
					</li>
				</ul>

				<table class="standard">
					<tr>
						<th>
							name
						</th>
						<th>
							description
						</th>
					</tr>
					
					<tr>
						<td>
							<a href="http://www.w3schools.com/htmldom/met_doc_getelementsbytagname.asp"><code>getElementsByTagName</code></a>
						</td>
						<td>
							returns array of descendents that have the given HTML tag, such as <code>&quot;div&quot;</code>
						</td>
					</tr>
					
					<tr>
						<td>
							<a href="http://www.w3schools.com/htmldom/met_doc_getelementsbyname.asp"><code>getElementsByName</code></a>
						</td>
						<td>
							returns array of descendents that have the given <code>name</code> attribute (mostly useful for accessing form controls)
						</td>
					</tr>
				</table>
			</div>



			<div class="slide">
				<h1>Getting all elements of a certain type</h1>

				<p>
						highlight all paragraphs in the document:
				</p>

				<pre class="examplecode js">
var allParas = document.<em>getElementsByTagName</em>(&quot;p&quot;);
for (var i = 0; i &lt; allParas.length; i++) {
	allParas[i].style.backgroundColor = &quot;yellow&quot;;
}
</pre>

				<pre class="html">
&lt;body&gt;
	<em>&lt;p&gt;This is the first paragraph&lt;/p&gt;
	&lt;p&gt;This is the second paragraph&lt;/p&gt;
	&lt;p&gt;You get the idea...&lt;/p&gt;</em>
&lt;/body&gt;
</pre>
			</div>



			<div class="slide">
				<h1>Combining with <code>getElementById</code></h1>

				<p>
					highlight all paragraphs inside of the section with ID <code>&quot;address&quot;</code>:
				</p>

<pre class="examplecode js">
var addr = document.getElementById(&quot;address&quot;);
var addrParas = <em>addr</em>.getElementsByTagName(&quot;p&quot;);
for (var i = 0; i &lt; addrParas.length; i++) {
	addrParas[i].style.backgroundColor = &quot;yellow&quot;;
}
</pre>

<pre class="html"><code>&lt;p&gt;This won't be returned!&lt;/p&gt;
&lt;div id=&quot;address&quot;&gt;
	<em>&lt;p&gt;1234 Street&lt;/p&gt;
	&lt;p&gt;Atlanta, GA&lt;/p&gt;</em>
&lt;/div&gt;</code></pre>

			</div>



			<div class="slide">
				<h1>
					Creating new nodes
					<span class="readingsection">(8.3.5)</span>
				</h1>

<pre class="examplecode js">
<span class="comment">// create a new &lt;h2&gt; node</span>
var newHeading = <em>document.createElement</em>(&quot;h2&quot;);
newHeading.innerHTML = &quot;This is a heading&quot;;
newHeading.style.color = &quot;green&quot;;
</pre>

				<ul>
					<li>
						<code>document.createElement(&quot;<var>tag</var>&quot;)</code>
					: creates and returns a new empty DOM node representing an element of that type
						<ul>
							<li>this node's properties can be set just like any other DOM node's</li>
						</ul>
					</li>

					<li>
						<code>document.createTextNode(&quot;<var>text</var>&quot;)</code>
						: creates and returns a new text node containing the given text
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Modifying the DOM tree</h1>

				<p>Every DOM element object has these methods:</p>

				<table class="standard">
					<tr>
						<th>
							name
						</th>
						<th>
							description
						</th>
					</tr>
					
					<tr>
						<td>
							<code><a href="http://www.w3schools.com/dom/met_node_appendchild.asp">appendChild</a>(<var>node</var>)</code>
						</td>
						<td>
							places given node at end of this node's child list
						</td>
					</tr>
					
					<tr>
						<td>
							<code><a href="http://www.w3schools.com/dom/met_node_insertbefore.asp">insertBefore</a>(<var>new</var>,&nbsp;<var>old</var>)</code>
						</td>
						<td>
							places the given new node in this node's child list just before <code>old</code> child
						</td>
					</tr>
					
					<tr>
						<td>
							<code><a href="http://www.w3schools.com/dom/met_node_removechild.asp">removeChild</a>(<var>node</var>)</code>
						</td>
						<td>
							removes given node from this node's child list
						</td>
					</tr>
					
					<tr>
						<td>
							<code><a href="http://www.w3schools.com/dom/met_node_replacechild.asp">replaceChild</a>(<var>new</var>,&nbsp;<var>old</var>)</code>
						</td>
						<td>
							replaces given child with new node
						</td>
					</tr>
				</table>
			</div>



			<div class="slide" id="thisslide" onclick="var p = document.createElement('p'); p.innerHTML = 'A paragraph!';  this.appendChild(p);">
				<h1>Adding a node to the page</h1>

<pre class="examplecode js">
window.onload = function() {
	var thisSlide = document.getElementById(&quot;slide38&quot;);
	thisSlide.onclick = slideClick;
}

function slideClick() {
	var p = <em>document.createElement(&quot;p&quot;)</em>;
	p.innerHTML = &quot;A paragraph!&quot;;
	<em>this.appendChild(p)</em>;
}
</pre>
				
				<ul>
					<li>merely creating a node does not add it to the page</li>
					<li>you must add the new node as a child of an existing element on the page</li>
				</ul>
			</div>



			<!--
			<div class="slide">
				<h1>DOM versus <code>innerHTML</code> revisited</h1>

				<p>Why not just code the previous example this way?</p>

<pre class="examplecode js">
function slideClick() {
	$(&quot;thisslide&quot;).<em>innerHTML += &quot;&lt;p&gt;A paragraph!&lt;/p&gt;&quot;</em>;
}
</pre>

				<div class="incremental">
					<ul>
						<li>Imagine that the new node is more complex:
							<ul>
								<li>ugly: bad style on many levels (e.g. JS code embedded within HTML)</li></li>
								<li>error-prone: must carefully distinguish <code>&quot;</code> and <code>'</code></li>
								<li>can only add at beginning or end, not in middle of child list</li>
							</ul>
						</li>
					</ul>

<pre class="examplecode js">
function slideClick() {
	this.innerHTML += <em>&quot;&lt;p style='color: red; " +
			&quot;margin-left: 50px;' &quot; +
			&quot;onclick='myOnClick();'&gt;&quot; +
			&quot;A paragraph!&lt;/p&gt;&quot;</em>;
}
</pre>

				</div>
			</div>



			<div class="slide">
				<h1>Benefits of DOM over <code>innerHTML</code></h1>

<pre class="examplecode js">
function slideClick() {
	var p = document.createElement(&quot;p&quot;);
	<em>p.className = &quot;special&quot;;
	p.onclick = myOnClick;</em>
	p.textContent = &quot;A paragraph!&quot;;
	$(&quot;thisslide&quot;).appendChild(p);
}
</pre>

<pre class="examplecode css">
.special {
	color: red;
	margin-left: 50px;
}
</pre>

				<ul>
					<li>cleaner to attach event handlers to DOM object</li>
					<li>cleaner to set styles by attaching classes to DOM objects</li>
				</ul>
			</div>
			-->



			<div class="slide">
				<h1>Firebug's debugger</h1>

				<div class="centerfigure">
					<img src="images/firebug_debugger.png" alt="Firebug JS Debugger" style="max-width: 70%;" />
				</div>

				<ul>
					<li>open Firebug, click <strong>Script</strong> tab</li>
					<li>click to the left of a line to set a <strong>breakpoint</strong></li>
					<li><strong>refresh</strong> page;  when script gets to that line, program will halt</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Breakpoints</h1>

				<div class="centerfigure">
					<img src="images/firebug_debugger_breakpoint.png" alt="Firebug breakpoint" style="max-width: 70%;" />
				</div>

				<ul>
					<li>once stopped at a breakpoint, you can examine variables in the <strong>Watch</strong> tab at right
						<ul>
							<li>can click <span style="border: 1px solid black;">+</span> to see properties/methods inside any object</li>
							<li><strong>this</strong> variable holds data about current object, or global data</li>
							<li>if the object is global or not listed, type its name in the &quot;New watch expression...&quot; box</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Stepping through code</h1>

				<div class="centerfigure">
					<img src="images/firebug_debugger_breakpoint.png" alt="Firebug breakpoint" style="max-width: 70%;" />
				</div>

				<ul>
					<li>once stopped at a breakpoint, you can continue execution:
						<ul>
							<li><img src="images/debugger_continue.png" alt="debug" /> <strong>continue</strong> (F8): start program running again</li>
							<li><img src="images/debugger_step_over.png" alt="debug" /> <strong>step over</strong> (F10): run current line of code completely, then stop again</li>
							<li><img src="images/debugger_step_into.png" alt="debug" /> <strong>step into</strong> (F11): run current line of code; if it contains a call to another function, go into it</li>
							<li><img src="images/debugger_step_out.png" alt="debug" /> <strong>step out</strong> (Shift-F11): run the current function to completion and return, then stop</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Debugging CSS property code</h1>

				<div class="centerfigure">
					<img src="images/firebug_css_debug.png" alt="Firebug Debug CSS" style="max-width: 70%;" />
				</div>

				<ul>
					<li>expand DOM object with <span style="border: 1px solid black;">+</span>, and expand its <code>style</code> property to see all styles</li>
					<li>also look at HTML (left) tab, Style (right) tab to see styles</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>General good coding practices</h1>

				<ul>
					<li>ALWAYS code with Firebug installed</li>
					<li>incremental development: code a little, test a little</li>	
					<li>follow good general coding principles
						<ul>
							<li>remove redundant code</li>
							<li>make each line short and simple</li>
						</ul>
					</li>
					<li>use lines and variables liberally
						<ul>
							<li>it's good to save parts of a complex computation as variables</li>
							<li>helps see what part of a big expression was bad/undefined/etc.</li>
							<li>blank lines and profuse whitespace make code easier to read</li>
						</ul>
					</li>
					<li>don't fear the Firebug debugger</li>
				</ul>
			</div>

<!--#include virtual="commonbottom.html" -->
