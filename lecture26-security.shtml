<!--#include virtual="commontop.html" -->
        <title>Web Programming Step by Step, Lecture 26: Web Security</title>
    </head>

    <body>
        <div class="layout">
            <div id="controls"><!-- DO NOT EDIT --></div>
            <div id="currentSlide"><!-- DO NOT EDIT --></div>
            <div id="header"></div>

            <div id="footer">
                <h1><em>Web Programming Step by Step</em>, Lecture 26</h1>
                <h2>Web Security</h2>
            </div>
        </div>


        <div class="presentation">

            <div class="slide">
                <h1><a href="http://www.webstepbook.com/">Web Programming Step by Step</a></h1>
                <h3>Lecture 26 <br /> Web Security</h3>

                <p class="license">
                    Except where otherwise noted, the contents of this presentation are Copyright 2009 Marty Stepp, Jessica Miller, and Kevin Wallace.
                </p>

                <div class="w3c">
                    <a href="http://validator.w3.org/check/referer"><img src="images/w3c-xhtml11.png" alt="Valid XHTML 1.1" /></a>
                    <a href="http://jigsaw.w3.org/css-validator/check/referer"><img src="images/w3c-css.png" alt="Valid CSS!" /></a>
                </div>
            </div>
            
            
            
            <div class="slide titleslide">
                <h1>1. The "security mindset"</h1>
                
                <ul>
                    <li><strong>security mindset</strong></li>
                    <li>some basic web attacks</li>
                    <li>breaking and securing an example page</li>

                </ul>
            </div>



            <div class="slide">
                <h1>CSE &lt;= 190M</h1>
                
                <div>
                    <img src="images/group_hug.jpg" alt="group hug" style="float: right; margin-left: 1em" />

                </div>
                
                <ul>
                    <li>until now, we have assumed:
                        <ul>
                            <li>valid user input</li>
                            <li>non-malicious users</li>
                            <li>nothing will ever go wrong</li>
                        </ul>

                    </li>
                    <li>this is unrealistic!</li>
                </ul>
            </div>
            
            
            
            <div class="slide">
                <h1>The real world</h1>
                
                <div>
                    <img src="images/orcs.jpg" alt="orcs (dorks?)" style="float: right; margin-left: 1em" />

                </div>
                
                <ul>
                    <li>in order to write secure code, we must assume:
                        <ul>
                            <li>invalid input</li>
                            <li>evil users</li>
                            <li>everybody is out to get you</li>
                        </ul>

                    </li>
                    <li>trust nothing</li>
                </ul>
            </div>
            
            
            
            <div class="slide titleslide">
                <h1>2. Some basic web attacks</h1>
                
                <ul>
                    <li>security mindset</li>
                    <li><strong>some basic web attacks</strong></li>
                    <li>breaking and securing an example page</li>

                </ul>
            </div>
            
            
            
            <div class="slide">
                <h1>HTML injection</h1>
                
                <p class="description">
                    a flaw where a user is able to inject arbitrary HTML content into your page
                </p>

                <ul>
                    <li>why is this bad?  it allows others to:
                        <ul>
                            <li>disrupt the flow/layout of your site</li>
                            <li>put words into your mouth</li>
                            <li>(possibly) run JavaScript on your users' computers</li>
                        </ul>

                    </li>
                    <li>kinds of injected content:
                        <ul>
                            <li>annoying: <code>results.php?name=&lt;blink&gt;lololol&lt;/blink&gt;</code></li>
                            <li>malicious and harmful: <code>onlinebanking.php?text=&lt;script&gt;transferMoneyTo(&quot;Evil Kevin&quot;, 1000, &quot;USD&quot;);&lt;/script&gt;</code>

                                <ul>
                                    <li>injecting JavaScript content is called <span class="term">cross-site scripting</span> or XSS</li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                    <li>
                        example:  magic 8-ball
                        <ul>
                            <li>
                                <a href="https://webster.cs.washington.edu/kwal/lecture26/8ball/">https://webster.cs.washington.edu/kwal/lecture26/8ball/</a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
            
            
            
            <div class="slide">
                <h1>Securing against HTML injection</h1>
                
                <ul>
                    <li>one idea: disallow harmful characters
                        <ul>
                            <li>HTML injection is impossible without &lt; &gt;</li>
                            <li>can strip those characters from incoming input</li>

                            <li>or, just reject the entire request if they are present</li>
                        </ul>
                    </li>
                    
                    <li>better idea: allow them, but <span class="term">escape</span> them
                        <ul>
                            <li>&lt; &gt; &rarr; &amp;lt; &amp;gt;</li>

                            <li>PHP's <a href="http://www.php.net/htmlspecialchars"><code>htmlspecialchars</code></a> function escapes HTML characters:

<pre class="php">
&lt;?= <em>htmlspecialchars</em>($username) ?&gt;
</pre>

                            </li>
                        </ul>

                    </li>
                </ul>
            </div>
            
            
            
            <div class="slide">
                <h1>SQL injection</h1>
                
                <p class="description">
                    a flaw where the user is able to inject arbitrary SQL commands into your query
                </p>
                
                <ul>

                    <li>
                        <code>$query = &quot;SELECT name, ssn, dob FROM users <br />
                        WHERE username = '$username' AND password = '$password'&quot;;</code>
                        
                        <ul>
                            <li>
                                Password: <input type="text" value="' OR '1'='1" />

                            </li>
                        </ul>
                    </li>
                    <li>
                        <code>$query = &quot;SELECT name, ssn, dob FROM users <br />
                        WHERE username = '$username' AND password = '<em class="highlight">' OR '1'='1</em>'&quot;;</code>

                        
                        <ul>
                            <li>
                                What will the above query return?  Why is this bad?
                            </li>
                        </ul>
                    </li>
                    <li>
                        example:  simpsons grade lookup
                        <ul>
                            <li>
                                <a href="https://webster.cs.washington.edu/kwal/lecture26/grades/">https://webster.cs.washington.edu/kwal/lecture26/grades/</a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
            
            
            
            <div class="slide">

                <h1>Securing against SQL injection</h1>
                
                <div class="figure">
                    <img src="images/xkcd_tables.png" alt="bobby tables xkcd comic" />
                </div>

                <ul>
                    <li>similar to securing against HTML injection, escape the string before you include it in your query</li>
                    <li>

                        use the PHP <a class="underscorelink" href="http://www.php.net/mysql_real_escape_string"><code>mysql_real_escape_string</code></a> function
                    
                        <pre class="examplecode php">
$username = <em>mysql_real_escape_string($_REQUEST[&quot;username&quot;])</em>;
$password = <em>mysql_real_escape_string($_REQUEST[&quot;password&quot;])</em>;
$query = &quot;SELECT name, ssn, dob FROM users
WHERE username = '$username' AND password = '$password'&quot;;

</pre>

                    </li>
                </ul>
            </div>
            
            
            
            <div class="slide titleslide">
                <h1>3. Breaking and securing an example page</h1>
                
                <ul>
                    <li>PHP/SQL review</li>

                    <li>some basic web attacks</li>
                    <li><strong>breaking and securing an example page</strong></li>
                </ul>
            </div>



            <div class="slide practiceproblem">
                <h1>Practice problem: Hack Marty's turnin</h1>

                
                <ul>
                    <li>How can we break this page? <br />
                        <a href="https://webster.cs.washington.edu/kwal/lecture26/turnin/login.php">https://webster.cs.washington.edu/kwal/lecture26/turnin/login.php</a>
                    </li>
                    
                    <li>How can we correct the security problems and fix the page?</li>
                </ul>
            </div>


<!--#include virtual="commonbottom.html" -->
