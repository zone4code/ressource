<!--#include virtual="commontop.html" -->
		<title>Web Programming Step by Step, Lecture 27: Object-Oriented JavaScript</title>
	</head>

	<body>
		<div class="layout">
			<div id="controls"><!-- DO NOT EDIT --></div>
			<div id="currentSlide"><!-- DO NOT EDIT --></div>
			<div id="header"></div>
			<div id="footer">
				<h1><em>Web Programming Step by Step</em>, Lecture 27</h1>
				<h2>Object-Oriented JavaScript</h2>
			</div>
		</div>

		<div class="presentation">
			<div class="slide">
				<h1><a href="http://www.webstepbook.com/">Web Programming Step by Step</a></h1>
				<h3>Lecture 27 <br /> Object-Oriented JavaScript</h3>

				<p class="license">
					Except where otherwise noted, the contents of this presentation are Copyright 2009 Marty Stepp and Jessica Miller.
				</p>

				<div class="w3c">
					<a href="http://validator.w3.org/check/referer"><img src="images/w3c-xhtml11.png" alt="Valid XHTML 1.1" /></a>
					<a href="http://jigsaw.w3.org/css-validator/check/referer"><img src="images/w3c-css.png" alt="Valid CSS!" /></a>
				</div>
			</div>
			
			
			
			<div class="slide titleslide">
				<h1>Lecture Outline</h1>
				
				<ul>
					<li>
						Motivation for objects
					</li>
					<li>
						Creating custom objects
					</li>
					<li>
						Object prototypes and &quot;classes&quot;
					</li>
					<li>
						Pseudo-inheritance using prototypes
					</li>
					<li>
						The Prototype framework's features for classes and inheritance
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Why use classes and objects?</h1>
				
				<div class="rightfigure">
					<img src="images/object.png" alt="object" />
				</div>
				
				<ul>
					<li>small programs are easily written without objects</li>
					<li>JavaScript treats functions as <em>first-class citizens</em></li>
					<li>larger programs become cluttered with disorganized functions</li>
					<li>objects group <em>related data and behavior</em>
						<ul>
							<li>
								helps manage size and complexity, promotes code reuse
							</li>
						</ul>
					</li>
					
					<li>
						You have already <em>used</em> many types of JavaScript objects
						<ul>
							<li>
								Strings, arrays, HTML / XML DOM nodes
							</li>
							<li>
								Prototype <code>Ajax.Request</code>, Scriptaculous <code>Effect</code> / <code>Sortable</code> / <code>Draggable</code>
							</li>
						</ul>
					</li>
				</ul>
						
					</li>
					
				</ul>
			</div>

			
			
			<div class="slide">
				<h1>Creating a new anonymous object</h1>
				
				<pre class="syntaxtemplate js">
var <var>name</var> = {
	<var>fieldName</var>: <var>value</var>,
	...
	<var>fieldName</var>: <var>value</var>
};
</pre>

				<pre class="examplecode js">
var pt = <em>{
	x: 4,
	y: 3
}</em>;
alert(pt.x + &quot;, &quot; + pt.y);
</pre>

				<ul>
					<li>in JavaScript, you can create a new object without creating a class</li>
					<li>the above is like a <code>Point</code> object; it has fields named <code>x</code> and <code>y</code></li>
					<li>the object does not belong to any class; it is the only one of its kind
						<ul>
							<li>
								<code>typeof(pt) === &quot;object&quot;</code>
							</li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>You've already done this...</h1>

				<pre class="examplecode js">
new Ajax.Request(&quot;http://example.com/app.php&quot;,
	<em>{
		method: &quot;get&quot;,            <span class="comment">// an object with a field named method (String)</span>
		onSuccess: ajaxSuccess    <span class="comment">// and a method named onSuccess</span>
	}</em>
);

$(&quot;my_element&quot;.fade(
	<em>{
		duration: 2.0,            <span class="comment">// an object with 3 fields named:</span>
		from: 1.0,                <span class="comment">// duration, from, and to (Number)</span>
		to: 0.5
	}</em>
);
</pre>

				<ul>
					<li>the parameters in <code>{}</code> passed to Prototype/Scriptaculous were actually anonymous objects</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Objects that have behavior (functions/methods)</h1>
				
				<pre class="syntaxtemplate js">
var <var>name</var> = {
	...
	<var>methodName</var>: function(<var>parameters</var>) {
		<var>statements</var>;
	}
};
</pre>

				<pre class="examplecode js">
var pt = {
	x: 4,  y: 3,
	<em>distanceFromOrigin: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}</em>
}</em>;

alert(pt.distanceFromOrigin());   <span class="comment">// 5</span>
</pre>

				<ul>
					<li>like in Java, objects' methods run &quot;inside&quot; that object
						<ul>
							<li>inside an object's method, the object refers to itself as <code>this</code></li>
							<li>unlike in Java, the <code>this</code> keyword is mandatory in JS</li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>A poor attempt at a &quot;constructor&quot;</h1>
				
				<p class="description">
					What if we want to create an entire new class, not just one object?
				</p>
				
				<ul>
					<li>JavaScript, unlike Java, <em>does NOT have classes</em></li>
					<li>we could emulate the functionality of a constructor with a function:
					
						<pre class="examplecode js">
<span class="comment">// Creates and returns a new Point object. (This is bad code.)</span>
<em>function constructPoint(xValue, yValue)</em> {
	var pt = {
		x: <em>xValue</em>,  y: <em>yValue</em>,
		distanceFromOrigin: function() {
			return Math.sqrt(this.x * this.x + this.y * this.y;
		}
	}</em>;
	<em>return pt;</em>
}
</pre>

						<pre class="examplecode js">
var p = <em>constructPoint(4, -3)</em>;
</pre>
					</li>
					<li>
						the above code is ugly and doesn't match the <code>new</code> syntax we're used to
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Constructor functions</h1>
				
				<pre class="examplecode js">
<span class="comment">// Constructs and returns a new Point object.</span>
<em>function <em>Point</em>(xValue, yValue)</em> {
	<em>this.x =</em> xValue;
	<em>this.y =</em> yValue;
	<em>this.distanceFromOrigin</em> = function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	};
}
</pre>

				<pre class="examplecode js">
var p = <em>new Point(4, -3)</em>;
</pre>

				<ul>
					<li>
						a constructor is just a normal function
					</li>
					
					<li>
						when any function called with <code>new</code>, JavaScript does the following:
						<ul>
							<li>
								creates a new empty anonymous object and uses it as <code>this</code> within the function
							</li>
							<li>
								implicitly returns the new object at the end of the function
							</li>
						</ul>
					</li>
					<li>
						what happens if our &quot;constructor&quot; is called as a normal function, without <code>new</code>?
						
						<pre title="It works, but 'this' is the global window object, so it silently adds an x/y field and distanceFromOrigin method to window.  Probably not what you want.">
var p = <em class="bad">Point(4, -3)</em>;
</pre>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Problems with our constructor</h1>
				
						<pre class="examplecode js">
<span class="comment">// Constructs and returns a new Point object.</span>
function Point(xValue, yValue) {
	this.x = xValue;
	this.y = yValue;
	<em class="bad">this.distanceFromOrigin = function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	};</em>
}
</pre>

				<ul>
					<li>
						ugly syntax; every method must be declared inside the constructor
					</li>
					<li>
						(subtle) replicates the methods in every object (wasteful)
						<ul>
							<li>
								every <code>Point</code> object has its own entire copy of the <code>distanceFromOrigin</code> code
							</li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>A paradigm shift: prototypes</h1>
				
				<div class="rightfigure">
					<img src="images/prototypes1.png" alt="prototypes" />
				</div>
				
				<ul>
					<li>
						<span class="term">prototype</span>: an ancestor of a JavaScript object
						
						<ul>
							<li>
								like a &quot;super-object&quot; instead of a superclass
							</li>
							<li>
								a parent at the object level rather than at the class level
							</li>
							<li>
								not to be confused with <span style="text-decoration: underline;">P</span>rototype framework
							</li>
						</ul>
					</li>
					
					<li>
						every object contains a reference to its prototype
						<ul>
							<li>
								the default is <code>Object.prototype</code>
							</li>
							<li>
								strings use <code>String.prototype</code>, etc.
							</li>
							<li>
								a prototype can have a prototype, and so on
							</li>
						</ul>
					</li>
					
					<li>
						an object &quot;inherits&quot; all methods/data from its prototype(s)
						<ul>
							<li>
								it doesn't have to make a copy of them, which saves memory
							</li>
						</ul>
					</li>
					
					<li>
						prototypes allow JavaScript to mimic classes and inheritance
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>An object's prototype chain</h1>

				<div class="figure">
					<img src="images/prototype-chain.png" alt="prototype chain" />
				</div>
				
				<ul>
					<li>
						when you try to look up a property or method in an object, JavaScript:
						<ol>
							<li>
								Sees if the object itself contains that property/method.
							</li>
							<li>
								If not, recursively checks the object's prototype to see if it has the property/method.
							</li>
							<li>
								Continues up the &quot;prototype chain&quot; until it finds the property/method or gives up with <code>undefined</code>.
							</li>
						</ol>
					</li>
					<!--
					<li>
						Example: <code>p1.x</code> is found in <code>p1</code>, but <code>p1.toString</code> is found in <code>Object.prototype</code>
					</li>
					-->
				</ul>
			</div>
			
			

			<div class="slide">
				<h1>Constructors and prototypes</h1>
				
				<pre class="examplecode js">
<span class="comment">// also causes Point.prototype to become defined</span>
function <em>Point</em>(xValue, yValue) {
	...
}
</pre>

				<ul>
					<li>
						every constructor also has an associated prototype object
						<ul>
							<li>
								example: when we define our <code>Point</code> constructor, that creates a <code>Point.prototype</code>
							</li>
							<li>
								initially this object has nothing in it
							</li>
						</ul>
					</li>

					<li>
						every object you construct will use the constructor's prototype object as its prototype
						<ul>
							<li>
								example: every constructed <code>Point</code> object will use <code>Point.prototype</code>
							</li>
						</ul>
					</li>

					<li class="incremental">
						<em>(revised)</em> when any function called with <code>new</code>, JavaScript does the following:
						<ul>
							<li>
								creates a new empty anonymous object
							</li>
							<li>
								<strong>attaches the function's prototype object to the new object as its prototype</strong>
							</li>
							<li>
								runs the constructor's code, using the new object as <code>this</code>
							</li>
							<li>
								implicitly returns the new object at the end of the function
							</li>
						</ul>
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Modifying a prototype</h1>

				<pre class="syntaxtemplate js">
<span class="comment">// adding a method to the prototype</span>
<var>className</var>.prototype.<var>methodName</var> = function(<var>parameters</var>) {
	<var>statements</var>;
}
</pre>

				<pre class="examplecode js">
<em>Point.prototype.distanceFromOrigin</em> = function() {
	return Math.sqrt(this.x * this.x + this.y * this.y);
};
</pre>

				<ul>
					<li>
						adding a method/field to a prototype will give it to all objects using that prototype
						<ul>
							<li>
								better than manually adding each method to each object (copying the method N times)
							</li>
						</ul>
					</li>
					
					<li>
						we generally put only methods and constant data (not fields!) in a prototype object
						<ul>
							<li>
								what would happen if we put the <code>x</code> and <code>y</code> fields in <code>Point.prototype</code>? 
							</li>
						</ul>
					</li>

					<li>
						<em>Exercise</em>: Add <code>distance</code> and <code>toString</code> methods.
					</li>
				</ul>
			</div>





			<div class="slide">
				<h1><code>Point</code> prototype methods</h1>

				<pre class="examplecode js">
<span class="comment">// Computes the distance between this point and the given point p.	</span>
Point.prototype.<em>distance</em> = function(p) {
	var dx = this.x - p.x;
	var dy = this.y - p.y;
	return Math.sqrt(dx * dx + dy * dy);
};

<span class="comment">// Returns a text representation of this object, such as &quot;(3, -4)&quot;.</span>	
Point.prototype.<em>toString</em> = function() {
	return &quot;(&quot; + this.x + &quot;, &quot; + this.y + &quot;)&quot;;
};
</pre>

				<ul>
					<li>our <code>Point</code> code could be saved into a file <code>Point.js</code></li>
					<li>the <code>toString</code> method works similarly as in Java</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Modifying built-in prototypes</h1>
				
				<pre class="examplecode js">
<span class="comment">// add a 'contains' method to all String objects</span>
<em>String.prototype.contains</em> = function(text) {
	return this.indexOf(text) >= 0;
};

<span class="comment">// add a 'lightUp' method to all HTML DOM element objects</span>
<em>HTMLElement.prototype.lightUp</em> = function() {
	this.style.backgroundColor = &quot;yellow&quot;;
	this.style.fontWeight = &quot;bold&quot;;
};
</pre>

				<!-- try it on $("slide13").lightUp(); -->

				<ul>
					<li>
						ANY prototype can be modified, including those of existing types
						<ul>
							<li>
								Prototype and other libraries do this
							</li>
							<li>
								not quite the same as adding something to a single object
							</li>
						</ul>
					</li>
					<li>
						<em>Exercise</em>: Add a <code>reverse</code> method to strings.
					</li>
					<li>
						<em>Exercise</em>: Add a <code>shuffle</code> method to arrays.
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide practiceproblem">
				<h1>Practice problem: Favorite Movies</h1>
				
				<div class="rightfigure">
					<img src="images/moviespage1.png" alt="movies page" />
				</div>
				
				<ul>
					<li>
						Add JavaScript to <code>moviegallery.html</code> to list your favorite movies.
					</li>
					
					<li>
						Create a new type called <code>Movie</code>:
					
						<ul>
							<li><code>Movie(<var>title</var>, <var>genre</var>, <var>rating</var>)</code> - constructor.</li>
							<li><code>createHTML()</code> - Creates and returns an HTML DOM object representing a <code>div</code> holding the HTML for this movie.
							
								<pre class="examplecode html">
&lt;div class=&quot;movie&quot;&gt;
	&lt;button class=&quot;delete&quot;&gt;X&lt;/button&gt;
	&lt;p class=&quot;title&quot;&gt;Indiana Jones 4&lt;/p&gt;
	&lt;p class=&quot;genre&quot;&gt;Action/Adventure&lt;/p&gt;
	&lt;p class=&quot;rating&quot;&gt;3/5&lt;/p&gt;
&lt;/div&gt;
</pre>
							</li>
							
							<li><code>deleteMe()</code> - Removes the movie from the page.</li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Pseudo-inheritance with prototypes</h1>

				<pre class="syntaxtemplate js">
function <var>SuperClassName</var>(<var>parameters</var>) {   <span class="comment">// &quot;superclass&quot; constructor</span>
	...
};
</pre>

				<pre class="syntaxtemplate js">
function <var>SubClassName</var>(<var>parameters</var>) {     <span class="comment">// &quot;subclass&quot; constructor</span>
	...
};
</pre>

				<pre class="syntaxtemplate js">
<var>SubClassName</var>.prototype = new <var>SuperClassName</var>(<var>parameters</var>);   <span class="comment">// connect them</span>
</pre>

				<hr />

				<ul>
					<li>
						to make a &quot;subclass&quot;, tell its constructor to use a &quot;superclass&quot; object as its prototype
					</li>
					
					<li>
						why not just write it this way?
						
						<pre class="syntaxtemplate js">
<var>SubClassName</var>.prototype = <em class="bad"><var>SuperClassName</var>.prototype</em>;   <span class="comment">// connect them</span>
</pre>
					</li>
				</ul>
			</div>
			
			
			
			<!-- ***
				wrapping all of your code in a function call to avoid globals?
				
				pseudo-inheritance
					ChildClassName.prototype = new ParentClass();.
					ChildClassName.prototype.constructor=ChildClassName;
			-->
			
			
			
			<div class="slide">
				<h1>Pseudo-inheritance example</h1>

				<pre class="examplecode js">
<span class="comment">// Constructor for Point3D &quot;class&quot;</span>
function <em>Point3D</em>(x, y, z) {
	this.x = x;
	this.y = y;
	this.z = z;
};

<em>Point3D.prototype = new Point(0, 0);</em>   <span class="comment">// set as &quot;subclass&quot; of Point</span>

<span class="comment">// override distanceFromOrigin method</span>
Point3D.prototype.<em>distanceFromOrigin</em> = function() {
	return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
};
</pre>

				<ul>
					<li>
						mostly works fine, but there no equivalent of the <code>super</code> keyword
					</li>
					
					<li>
						no built-in way to call an overridden method
					</li>

					<li>
						no easy way to call the superclass's constructor
					</li>
				</ul>
			</div>



			<div class="slide">
				<h1>Classes and prototypes</h1>
				
				<ul>
					<li>limitations of <span style="text-decoration: underline">p</span>rototype-based code:
						<ul>	
							<li>unfamiliar / confusing to many programmers</li>
							<li>somewhat unpleasant syntax</li>
							<li>difficult to get inheritance-like semantics (subclassing, overriding methods)</li>
						</ul>
					</li>
				</ul>
				
				<ul>
					<li><span style="text-decoration: underline">P</span>rototype library's <a href="http://www.prototypejs.org/api/class/create"><code>Class.create</code></a> method makes a new class of objects</li>
						<ul>
							<li>essentially the same as using prototypes, but uses a more familiar style and allows for <a href="http://www.prototypejs.org/learn/class-inheritance">richer inheritance semantics</a></li>
						</ul>
					</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1>Creating a class</h1>
				
				<pre class="syntaxtemplate js">
<var>className</var> = Class.create({
	<span class="comment">// constructor</span>
	initialize : function(<var>parameters</var>) {
		this.<var>fieldName</var> = <var>value</var>;
		...
	},

	<var>methodName</var> : function(<var>parameters</var>) {	
		<var>statements</var>;
	},
	...
});
</pre>

				<ul>
					<li>constructor is written as a special <code>initialize</code> function</li>
				</ul>
			</div>
			
			
			
			<div class="slide">
				<h1><code>Class.create</code> example</h1>

				<pre class="examplecode js">
Point = Class.create({
	<span class="comment">// Constructs a new Point object at the given initial coordinates.</span>
	initialize: function(initialX, initialY) {
		this.x = initialX;
		this.y = initialY;
	},

	<span class="comment">// Computes the distance between this Point and the given Point p.	</span>
	distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	},

	<span class="comment">// Returns a text representation of this Point object.</span>	
	toString: function() {
		return &quot;(&quot; + this.x + &quot;, &quot; + this.y + &quot;)&quot;;
	}
});
</pre>

			</div>
			
			
			
			<div class="slide">
				<h1>Inheritance</h1>

				<pre class="syntaxtemplate js">
<var>className</var> = Class.create(<em><var>superclass</var></em>, {
	...
});
</pre>

				<pre class="examplecode js">
<span class="comment">// Points that use &quot;Manhattan&quot; (non-diagonal) distances.</span>
ManhattanPoint = Class.create(<em>Point</em>, {
	<span class="comment">// Computes the Manhattan distance between this Point and p.</span>
	<span class="comment">// Overrides the distance method from Point.</span>
	distance: function(p) {
		var dx = Math.abs(this.x - p.x);
		var dy = Math.abs(this.y - p.y);
		return dx + dy;
	},
	
	<span class="comment">// Computes this point's Manhattan Distance from the origin.</span>
	distanceFromOrigin: function() {
		return this.x + this.y;
	}
});
</pre>
			</div>
			
			
			
			<div class="slide">
				<h1>Referring to superclass: <code>$super</code></h1>

				<pre class="syntaxtemplate js">
<var>name</var>: function(<em>$super</em>, <var>parameters</var>) {
	<var>statements</var>;
}
</pre>

				<pre class="examplecode js">
ManhattanPoint3D = Class.create(ManhattanPoint, {
	initialize: function(<em>$super</em>, initialX, initialY, initialZ) {
		<em>$super(initialX, initialY);</em>   // call Point constructor
		this.z = initialZ;
	},
	
	<span class="comment">// Returns 3D &quot;Manhattan Distance&quot; from p.</span>
	distance: function(<em>$super</em>, p) {
		var dz = Math.abs(this.z - p.z);
		return <em>$super(p)</em> + dz;
	},
});
</pre>
				
				<ul>
					<li>can refer to superclass's overridden method as <code>$super</code> in code</li>
				</ul>
			</div>
			
			
			
			<div class="slide practiceproblem">
				<h1>Practice problem: Fancy movies</h1>
				
				<div class="rightfigure">
					<img src="images/moviespage2.png" alt="movies page v2" />
				</div>
				
				<ul>
					<li>
						Modify the movie gallery code from the last practice problem so that it uses Prototype's <code>Class.create</code> method to make the <code>Movie</code> type.
					</li>

					<li>
						Once this is done, add a new subtype <code>FancyMovie</code> that displays its movie ratings as star images rather than just showing a number on the page.
					</li>
				</ul>
			</div>

<!--#include virtual="commonbottom.html" -->
